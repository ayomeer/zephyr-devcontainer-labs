
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	00 11 00 20 4d 11 00 08 7f 2a 00 08 21 11 00 08     ... M....*..!...
 8000010:	21 11 00 08 21 11 00 08 21 11 00 08 00 00 00 00     !...!...!.......
	...
 800002c:	59 0e 00 08 21 11 00 08 00 00 00 00 05 0e 00 08     Y...!...........
 800003c:	d9 19 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000050:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000060:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000070:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000080:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000090:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 80000a0:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 80000b0:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 80000c0:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 80000d0:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 80000e0:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 80000f0:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000100:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000110:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000120:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000130:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000140:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000150:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000160:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000170:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000180:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 8000190:	09 0f 00 08 09 0f 00 08 09 0f 00 08 09 0f 00 08     ................
 80001a0:	09 0f 00 08 09 0f 00 08 09 0f 00 08                 ............

Disassembly of section text:

080001ac <__aeabi_uldivmod>:
 80001ac:	b953      	cbnz	r3, 80001c4 <__aeabi_uldivmod+0x18>
 80001ae:	b94a      	cbnz	r2, 80001c4 <__aeabi_uldivmod+0x18>
 80001b0:	2900      	cmp	r1, #0
 80001b2:	bf08      	it	eq
 80001b4:	2800      	cmpeq	r0, #0
 80001b6:	bf1c      	itt	ne
 80001b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001c0:	f000 b80c 	b.w	80001dc <__aeabi_idiv0>
 80001c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001cc:	f000 f808 	bl	80001e0 <__udivmoddi4>
 80001d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001d8:	b004      	add	sp, #16
 80001da:	4770      	bx	lr

080001dc <__aeabi_idiv0>:
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop

080001e0 <__udivmoddi4>:
 80001e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001e4:	4686      	mov	lr, r0
 80001e6:	468c      	mov	ip, r1
 80001e8:	4608      	mov	r0, r1
 80001ea:	9e08      	ldr	r6, [sp, #32]
 80001ec:	4615      	mov	r5, r2
 80001ee:	4674      	mov	r4, lr
 80001f0:	4619      	mov	r1, r3
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	f040 80c2 	bne.w	800037c <__udivmoddi4+0x19c>
 80001f8:	4285      	cmp	r5, r0
 80001fa:	fab2 f282 	clz	r2, r2
 80001fe:	d945      	bls.n	800028c <__udivmoddi4+0xac>
 8000200:	b14a      	cbz	r2, 8000216 <__udivmoddi4+0x36>
 8000202:	f1c2 0320 	rsb	r3, r2, #32
 8000206:	fa00 fc02 	lsl.w	ip, r0, r2
 800020a:	fa2e f303 	lsr.w	r3, lr, r3
 800020e:	4095      	lsls	r5, r2
 8000210:	ea43 0c0c 	orr.w	ip, r3, ip
 8000214:	4094      	lsls	r4, r2
 8000216:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800021a:	b2a8      	uxth	r0, r5
 800021c:	fbbc f8fe 	udiv	r8, ip, lr
 8000220:	0c23      	lsrs	r3, r4, #16
 8000222:	fb0e cc18 	mls	ip, lr, r8, ip
 8000226:	fb08 f900 	mul.w	r9, r8, r0
 800022a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800022e:	4599      	cmp	r9, r3
 8000230:	d928      	bls.n	8000284 <__udivmoddi4+0xa4>
 8000232:	18eb      	adds	r3, r5, r3
 8000234:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8000238:	d204      	bcs.n	8000244 <__udivmoddi4+0x64>
 800023a:	4599      	cmp	r9, r3
 800023c:	d902      	bls.n	8000244 <__udivmoddi4+0x64>
 800023e:	f1a8 0702 	sub.w	r7, r8, #2
 8000242:	442b      	add	r3, r5
 8000244:	eba3 0309 	sub.w	r3, r3, r9
 8000248:	b2a4      	uxth	r4, r4
 800024a:	fbb3 fcfe 	udiv	ip, r3, lr
 800024e:	fb0e 331c 	mls	r3, lr, ip, r3
 8000252:	fb0c f000 	mul.w	r0, ip, r0
 8000256:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800025a:	42a0      	cmp	r0, r4
 800025c:	d914      	bls.n	8000288 <__udivmoddi4+0xa8>
 800025e:	192c      	adds	r4, r5, r4
 8000260:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000264:	d204      	bcs.n	8000270 <__udivmoddi4+0x90>
 8000266:	42a0      	cmp	r0, r4
 8000268:	d902      	bls.n	8000270 <__udivmoddi4+0x90>
 800026a:	f1ac 0302 	sub.w	r3, ip, #2
 800026e:	442c      	add	r4, r5
 8000270:	1a24      	subs	r4, r4, r0
 8000272:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8000276:	b11e      	cbz	r6, 8000280 <__udivmoddi4+0xa0>
 8000278:	40d4      	lsrs	r4, r2
 800027a:	2300      	movs	r3, #0
 800027c:	6034      	str	r4, [r6, #0]
 800027e:	6073      	str	r3, [r6, #4]
 8000280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000284:	4647      	mov	r7, r8
 8000286:	e7dd      	b.n	8000244 <__udivmoddi4+0x64>
 8000288:	4663      	mov	r3, ip
 800028a:	e7f1      	b.n	8000270 <__udivmoddi4+0x90>
 800028c:	bb92      	cbnz	r2, 80002f4 <__udivmoddi4+0x114>
 800028e:	1b43      	subs	r3, r0, r5
 8000290:	2101      	movs	r1, #1
 8000292:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000296:	b2af      	uxth	r7, r5
 8000298:	fbb3 fcfe 	udiv	ip, r3, lr
 800029c:	0c20      	lsrs	r0, r4, #16
 800029e:	fb0e 331c 	mls	r3, lr, ip, r3
 80002a2:	fb0c f807 	mul.w	r8, ip, r7
 80002a6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002aa:	4598      	cmp	r8, r3
 80002ac:	d962      	bls.n	8000374 <__udivmoddi4+0x194>
 80002ae:	18eb      	adds	r3, r5, r3
 80002b0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002b4:	d204      	bcs.n	80002c0 <__udivmoddi4+0xe0>
 80002b6:	4598      	cmp	r8, r3
 80002b8:	d902      	bls.n	80002c0 <__udivmoddi4+0xe0>
 80002ba:	f1ac 0002 	sub.w	r0, ip, #2
 80002be:	442b      	add	r3, r5
 80002c0:	eba3 0308 	sub.w	r3, r3, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	fb0e 331c 	mls	r3, lr, ip, r3
 80002ce:	fb0c f707 	mul.w	r7, ip, r7
 80002d2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d6:	42a7      	cmp	r7, r4
 80002d8:	d94e      	bls.n	8000378 <__udivmoddi4+0x198>
 80002da:	192c      	adds	r4, r5, r4
 80002dc:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80002e0:	d204      	bcs.n	80002ec <__udivmoddi4+0x10c>
 80002e2:	42a7      	cmp	r7, r4
 80002e4:	d902      	bls.n	80002ec <__udivmoddi4+0x10c>
 80002e6:	f1ac 0302 	sub.w	r3, ip, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	1be4      	subs	r4, r4, r7
 80002ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80002f2:	e7c0      	b.n	8000276 <__udivmoddi4+0x96>
 80002f4:	f1c2 0320 	rsb	r3, r2, #32
 80002f8:	fa20 f103 	lsr.w	r1, r0, r3
 80002fc:	4095      	lsls	r5, r2
 80002fe:	4090      	lsls	r0, r2
 8000300:	fa2e f303 	lsr.w	r3, lr, r3
 8000304:	4303      	orrs	r3, r0
 8000306:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800030a:	b2af      	uxth	r7, r5
 800030c:	fbb1 fcfe 	udiv	ip, r1, lr
 8000310:	fb0e 101c 	mls	r0, lr, ip, r1
 8000314:	0c19      	lsrs	r1, r3, #16
 8000316:	fb0c f807 	mul.w	r8, ip, r7
 800031a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800031e:	4588      	cmp	r8, r1
 8000320:	fa04 f402 	lsl.w	r4, r4, r2
 8000324:	d922      	bls.n	800036c <__udivmoddi4+0x18c>
 8000326:	1869      	adds	r1, r5, r1
 8000328:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032c:	d204      	bcs.n	8000338 <__udivmoddi4+0x158>
 800032e:	4588      	cmp	r8, r1
 8000330:	d902      	bls.n	8000338 <__udivmoddi4+0x158>
 8000332:	f1ac 0002 	sub.w	r0, ip, #2
 8000336:	4429      	add	r1, r5
 8000338:	eba1 0108 	sub.w	r1, r1, r8
 800033c:	b29b      	uxth	r3, r3
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	fb0e 111c 	mls	r1, lr, ip, r1
 8000346:	fb0c f707 	mul.w	r7, ip, r7
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	429f      	cmp	r7, r3
 8000350:	d90e      	bls.n	8000370 <__udivmoddi4+0x190>
 8000352:	18eb      	adds	r3, r5, r3
 8000354:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000358:	d204      	bcs.n	8000364 <__udivmoddi4+0x184>
 800035a:	429f      	cmp	r7, r3
 800035c:	d902      	bls.n	8000364 <__udivmoddi4+0x184>
 800035e:	f1ac 0102 	sub.w	r1, ip, #2
 8000362:	442b      	add	r3, r5
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800036a:	e792      	b.n	8000292 <__udivmoddi4+0xb2>
 800036c:	4660      	mov	r0, ip
 800036e:	e7e3      	b.n	8000338 <__udivmoddi4+0x158>
 8000370:	4661      	mov	r1, ip
 8000372:	e7f7      	b.n	8000364 <__udivmoddi4+0x184>
 8000374:	4660      	mov	r0, ip
 8000376:	e7a3      	b.n	80002c0 <__udivmoddi4+0xe0>
 8000378:	4663      	mov	r3, ip
 800037a:	e7b7      	b.n	80002ec <__udivmoddi4+0x10c>
 800037c:	4283      	cmp	r3, r0
 800037e:	d906      	bls.n	800038e <__udivmoddi4+0x1ae>
 8000380:	b916      	cbnz	r6, 8000388 <__udivmoddi4+0x1a8>
 8000382:	2100      	movs	r1, #0
 8000384:	4608      	mov	r0, r1
 8000386:	e77b      	b.n	8000280 <__udivmoddi4+0xa0>
 8000388:	e9c6 e000 	strd	lr, r0, [r6]
 800038c:	e7f9      	b.n	8000382 <__udivmoddi4+0x1a2>
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	b98f      	cbnz	r7, 80003b8 <__udivmoddi4+0x1d8>
 8000394:	4283      	cmp	r3, r0
 8000396:	d301      	bcc.n	800039c <__udivmoddi4+0x1bc>
 8000398:	4572      	cmp	r2, lr
 800039a:	d808      	bhi.n	80003ae <__udivmoddi4+0x1ce>
 800039c:	ebbe 0402 	subs.w	r4, lr, r2
 80003a0:	eb60 0303 	sbc.w	r3, r0, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	469c      	mov	ip, r3
 80003a8:	b91e      	cbnz	r6, 80003b2 <__udivmoddi4+0x1d2>
 80003aa:	2100      	movs	r1, #0
 80003ac:	e768      	b.n	8000280 <__udivmoddi4+0xa0>
 80003ae:	4638      	mov	r0, r7
 80003b0:	e7fa      	b.n	80003a8 <__udivmoddi4+0x1c8>
 80003b2:	e9c6 4c00 	strd	r4, ip, [r6]
 80003b6:	e7f8      	b.n	80003aa <__udivmoddi4+0x1ca>
 80003b8:	f1c7 0c20 	rsb	ip, r7, #32
 80003bc:	40bb      	lsls	r3, r7
 80003be:	fa22 f40c 	lsr.w	r4, r2, ip
 80003c2:	431c      	orrs	r4, r3
 80003c4:	fa2e f10c 	lsr.w	r1, lr, ip
 80003c8:	fa20 f30c 	lsr.w	r3, r0, ip
 80003cc:	40b8      	lsls	r0, r7
 80003ce:	4301      	orrs	r1, r0
 80003d0:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80003d4:	fa0e f507 	lsl.w	r5, lr, r7
 80003d8:	fbb3 f8f9 	udiv	r8, r3, r9
 80003dc:	fa1f fe84 	uxth.w	lr, r4
 80003e0:	fb09 3018 	mls	r0, r9, r8, r3
 80003e4:	0c0b      	lsrs	r3, r1, #16
 80003e6:	fb08 fa0e 	mul.w	sl, r8, lr
 80003ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ee:	459a      	cmp	sl, r3
 80003f0:	fa02 f207 	lsl.w	r2, r2, r7
 80003f4:	d940      	bls.n	8000478 <__udivmoddi4+0x298>
 80003f6:	18e3      	adds	r3, r4, r3
 80003f8:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003fc:	d204      	bcs.n	8000408 <__udivmoddi4+0x228>
 80003fe:	459a      	cmp	sl, r3
 8000400:	d902      	bls.n	8000408 <__udivmoddi4+0x228>
 8000402:	f1a8 0002 	sub.w	r0, r8, #2
 8000406:	4423      	add	r3, r4
 8000408:	eba3 030a 	sub.w	r3, r3, sl
 800040c:	b289      	uxth	r1, r1
 800040e:	fbb3 f8f9 	udiv	r8, r3, r9
 8000412:	fb09 3318 	mls	r3, r9, r8, r3
 8000416:	fb08 fe0e 	mul.w	lr, r8, lr
 800041a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041e:	458e      	cmp	lr, r1
 8000420:	d92c      	bls.n	800047c <__udivmoddi4+0x29c>
 8000422:	1861      	adds	r1, r4, r1
 8000424:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000428:	d204      	bcs.n	8000434 <__udivmoddi4+0x254>
 800042a:	458e      	cmp	lr, r1
 800042c:	d902      	bls.n	8000434 <__udivmoddi4+0x254>
 800042e:	f1a8 0302 	sub.w	r3, r8, #2
 8000432:	4421      	add	r1, r4
 8000434:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000438:	fba0 9802 	umull	r9, r8, r0, r2
 800043c:	eba1 010e 	sub.w	r1, r1, lr
 8000440:	4541      	cmp	r1, r8
 8000442:	46ce      	mov	lr, r9
 8000444:	4643      	mov	r3, r8
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0x26e>
 8000448:	d106      	bne.n	8000458 <__udivmoddi4+0x278>
 800044a:	454d      	cmp	r5, r9
 800044c:	d204      	bcs.n	8000458 <__udivmoddi4+0x278>
 800044e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000452:	eb68 0304 	sbc.w	r3, r8, r4
 8000456:	3801      	subs	r0, #1
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0a6      	beq.n	80003aa <__udivmoddi4+0x1ca>
 800045c:	ebb5 020e 	subs.w	r2, r5, lr
 8000460:	eb61 0103 	sbc.w	r1, r1, r3
 8000464:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000468:	fa22 f307 	lsr.w	r3, r2, r7
 800046c:	ea4c 0303 	orr.w	r3, ip, r3
 8000470:	40f9      	lsrs	r1, r7
 8000472:	e9c6 3100 	strd	r3, r1, [r6]
 8000476:	e798      	b.n	80003aa <__udivmoddi4+0x1ca>
 8000478:	4640      	mov	r0, r8
 800047a:	e7c5      	b.n	8000408 <__udivmoddi4+0x228>
 800047c:	4643      	mov	r3, r8
 800047e:	e7d9      	b.n	8000434 <__udivmoddi4+0x254>

08000480 <main>:

static const struct gpio_dt_spec LED0_spec = GPIO_DT_SPEC_GET(LED0_NODE, gpios);
static const struct gpio_dt_spec LED1_spec = GPIO_DT_SPEC_GET(LED1_NODE, gpios);

int main(void)
{
 8000480:	b538      	push	{r3, r4, r5, lr}
	/*
	 * Exercise 4
	 * Configure GPIOs for switches as inputs and GPIOs for LEDs as outputs
	 */

	rc = gpio_pin_configure_dt(&SW0_spec, GPIO_INPUT);
 8000482:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000486:	481f      	ldr	r0, [pc, #124]	; (8000504 <main+0x84>)
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
 8000488:	4d1f      	ldr	r5, [pc, #124]	; (8000508 <main+0x88>)
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
 800048a:	4c20      	ldr	r4, [pc, #128]	; (800050c <main+0x8c>)
 800048c:	f002 fa3b 	bl	8002906 <gpio_pin_configure_dt>
 8000490:	4601      	mov	r1, r0
	printk("GPIO for SW0 configured. Returned %d\n", rc);
 8000492:	481f      	ldr	r0, [pc, #124]	; (8000510 <main+0x90>)
 8000494:	f002 fa72 	bl	800297c <printk>

	rc = gpio_pin_configure_dt(&SW1_spec, GPIO_INPUT);
 8000498:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800049c:	481d      	ldr	r0, [pc, #116]	; (8000514 <main+0x94>)
 800049e:	f002 fa32 	bl	8002906 <gpio_pin_configure_dt>
 80004a2:	4601      	mov	r1, r0
	printk("GPIO for SW1 configured. Returned %d\n", rc);
 80004a4:	481c      	ldr	r0, [pc, #112]	; (8000518 <main+0x98>)
 80004a6:	f002 fa69 	bl	800297c <printk>

	rc = gpio_pin_configure_dt(&LED0_spec, GPIO_OUTPUT);
 80004aa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80004ae:	481b      	ldr	r0, [pc, #108]	; (800051c <main+0x9c>)
 80004b0:	f002 fa29 	bl	8002906 <gpio_pin_configure_dt>
 80004b4:	4601      	mov	r1, r0
	printk("GPIO for LED0 configured. Returned %d\n", rc);
 80004b6:	481a      	ldr	r0, [pc, #104]	; (8000520 <main+0xa0>)
 80004b8:	f002 fa60 	bl	800297c <printk>

	rc = gpio_pin_configure_dt(&LED1_spec, GPIO_OUTPUT);
 80004bc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80004c0:	4818      	ldr	r0, [pc, #96]	; (8000524 <main+0xa4>)
 80004c2:	f002 fa20 	bl	8002906 <gpio_pin_configure_dt>
 80004c6:	4601      	mov	r1, r0
	printk("GPIO for LED1 configured. Returned %d\n", rc);
 80004c8:	4817      	ldr	r0, [pc, #92]	; (8000528 <main+0xa8>)
 80004ca:	f002 fa57 	bl	800297c <printk>

	/*
	 * Exercise 1
	 * Print a kernel debug message to your serial console
	 */
	printk("Hello Again!");
 80004ce:	4817      	ldr	r0, [pc, #92]	; (800052c <main+0xac>)
 80004d0:	f002 fa54 	bl	800297c <printk>
	return gpio_pin_get(spec->port, spec->pin);
 80004d4:	2100      	movs	r1, #0
 80004d6:	4628      	mov	r0, r5
 80004d8:	f002 fa2a 	bl	8002930 <gpio_pin_get>
	return gpio_pin_set(spec->port, spec->pin, value);
 80004dc:	2100      	movs	r1, #0
	return gpio_pin_get(spec->port, spec->pin);
 80004de:	4602      	mov	r2, r0
	return gpio_pin_set(spec->port, spec->pin, value);
 80004e0:	4620      	mov	r0, r4
 80004e2:	f002 fa39 	bl	8002958 <gpio_pin_set.isra.0>
	return gpio_pin_get(spec->port, spec->pin);
 80004e6:	2101      	movs	r1, #1
 80004e8:	4628      	mov	r0, r5
 80004ea:	f002 fa21 	bl	8002930 <gpio_pin_get>
	return gpio_pin_set(spec->port, spec->pin, value);
 80004ee:	2101      	movs	r1, #1
	return gpio_pin_get(spec->port, spec->pin);
 80004f0:	4602      	mov	r2, r0
	return gpio_pin_set(spec->port, spec->pin, value);
 80004f2:	4620      	mov	r0, r4
 80004f4:	f002 fa30 	bl	8002958 <gpio_pin_set.isra.0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 80004f8:	2100      	movs	r1, #0
 80004fa:	200a      	movs	r0, #10
 80004fc:	f002 f814 	bl	8002528 <z_impl_k_sleep>
 8000500:	e7e8      	b.n	80004d4 <main+0x54>
 8000502:	bf00      	nop
 8000504:	08003760 	.word	0x08003760
 8000508:	08003324 	.word	0x08003324
 800050c:	08003354 	.word	0x08003354
 8000510:	08003936 	.word	0x08003936
 8000514:	08003758 	.word	0x08003758
 8000518:	0800395c 	.word	0x0800395c
 800051c:	08003750 	.word	0x08003750
 8000520:	08003982 	.word	0x08003982
 8000524:	08003748 	.word	0x08003748
 8000528:	080039a9 	.word	0x080039a9
 800052c:	080039d0 	.word	0x080039d0

08000530 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8000530:	680b      	ldr	r3, [r1, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8000536:	4b01      	ldr	r3, [pc, #4]	; (800053c <char_out+0xc>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4718      	bx	r3
 800053c:	20000000 	.word	0x20000000

08000540 <__printk_hook_install>:
	_char_out = fn;
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <__printk_hook_install+0x8>)
 8000542:	6018      	str	r0, [r3, #0]
}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000000 	.word	0x20000000

0800054c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 800054c:	b507      	push	{r0, r1, r2, lr}
 800054e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 8000550:	2100      	movs	r1, #0
{
 8000552:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
 8000554:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 8000556:	4803      	ldr	r0, [pc, #12]	; (8000564 <vprintk+0x18>)
 8000558:	a901      	add	r1, sp, #4
 800055a:	f000 f805 	bl	8000568 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 800055e:	b003      	add	sp, #12
 8000560:	f85d fb04 	ldr.w	pc, [sp], #4
 8000564:	08000531 	.word	0x08000531

08000568 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8000568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800056c:	4681      	mov	r9, r0
 800056e:	b095      	sub	sp, #84	; 0x54
 8000570:	468b      	mov	fp, r1
 8000572:	4617      	mov	r7, r2
 8000574:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000576:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000578:	7838      	ldrb	r0, [r7, #0]
 800057a:	b908      	cbnz	r0, 8000580 <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 800057c:	4628      	mov	r0, r5
 800057e:	e358      	b.n	8000c32 <cbvprintf+0x6ca>
			OUTC(*fp++);
 8000580:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 8000582:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000584:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 8000586:	d006      	beq.n	8000596 <cbvprintf+0x2e>
			OUTC('%');
 8000588:	4659      	mov	r1, fp
 800058a:	47c8      	blx	r9
 800058c:	2800      	cmp	r0, #0
 800058e:	f2c0 8350 	blt.w	8000c32 <cbvprintf+0x6ca>
 8000592:	3501      	adds	r5, #1
		if (bps == NULL) {
 8000594:	e204      	b.n	80009a0 <cbvprintf+0x438>
		} state = {
 8000596:	2218      	movs	r2, #24
 8000598:	2100      	movs	r1, #0
 800059a:	a80e      	add	r0, sp, #56	; 0x38
 800059c:	f002 fa91 	bl	8002ac2 <memset>
	if (*sp == '%') {
 80005a0:	787b      	ldrb	r3, [r7, #1]
 80005a2:	2b25      	cmp	r3, #37	; 0x25
 80005a4:	d07d      	beq.n	80006a2 <cbvprintf+0x13a>
 80005a6:	2300      	movs	r3, #0
 80005a8:	1c78      	adds	r0, r7, #1
 80005aa:	4698      	mov	r8, r3
 80005ac:	469e      	mov	lr, r3
 80005ae:	469c      	mov	ip, r3
 80005b0:	461e      	mov	r6, r3
 80005b2:	4601      	mov	r1, r0
		switch (*sp) {
 80005b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80005b8:	2a2b      	cmp	r2, #43	; 0x2b
 80005ba:	f000 80a1 	beq.w	8000700 <cbvprintf+0x198>
 80005be:	f200 8098 	bhi.w	80006f2 <cbvprintf+0x18a>
 80005c2:	2a20      	cmp	r2, #32
 80005c4:	f000 809f 	beq.w	8000706 <cbvprintf+0x19e>
 80005c8:	2a23      	cmp	r2, #35	; 0x23
 80005ca:	f000 809f 	beq.w	800070c <cbvprintf+0x1a4>
 80005ce:	b12b      	cbz	r3, 80005dc <cbvprintf+0x74>
 80005d0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80005d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80005dc:	f1b8 0f00 	cmp.w	r8, #0
 80005e0:	d005      	beq.n	80005ee <cbvprintf+0x86>
 80005e2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80005e6:	f043 0320 	orr.w	r3, r3, #32
 80005ea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80005ee:	f1be 0f00 	cmp.w	lr, #0
 80005f2:	d005      	beq.n	8000600 <cbvprintf+0x98>
 80005f4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80005f8:	f043 0310 	orr.w	r3, r3, #16
 80005fc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000600:	f1bc 0f00 	cmp.w	ip, #0
 8000604:	d005      	beq.n	8000612 <cbvprintf+0xaa>
 8000606:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000612:	b12e      	cbz	r6, 8000620 <cbvprintf+0xb8>
 8000614:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 8000620:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000624:	f003 0044 	and.w	r0, r3, #68	; 0x44
 8000628:	2844      	cmp	r0, #68	; 0x44
 800062a:	d103      	bne.n	8000634 <cbvprintf+0xcc>
		conv->flag_zero = false;
 800062c:	f36f 1386 	bfc	r3, #6, #1
 8000630:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 8000634:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 8000638:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 800063a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 8000642:	d17f      	bne.n	8000744 <cbvprintf+0x1dc>
		conv->width_star = true;
 8000644:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000648:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
 800064c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 800064e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	2a2e      	cmp	r2, #46	; 0x2e
 8000656:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800065a:	bf0c      	ite	eq
 800065c:	2101      	moveq	r1, #1
 800065e:	2100      	movne	r1, #0
 8000660:	f361 0241 	bfi	r2, r1, #1, #1
 8000664:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 8000668:	d178      	bne.n	800075c <cbvprintf+0x1f4>
	if (*sp == '*') {
 800066a:	785a      	ldrb	r2, [r3, #1]
 800066c:	2a2a      	cmp	r2, #42	; 0x2a
 800066e:	d06e      	beq.n	800074e <cbvprintf+0x1e6>
	++sp;
 8000670:	3301      	adds	r3, #1
	size_t val = 0;
 8000672:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000674:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000678:	4619      	mov	r1, r3
 800067a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800067e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000682:	2e09      	cmp	r6, #9
 8000684:	f240 8095 	bls.w	80007b2 <cbvprintf+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 8000688:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 800068c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 800068e:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8000692:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 8000696:	460a      	mov	r2, r1
 8000698:	f360 0241 	bfi	r2, r0, #1, #1
 800069c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 80006a0:	e05c      	b.n	800075c <cbvprintf+0x1f4>
		conv->specifier = *sp++;
 80006a2:	1cba      	adds	r2, r7, #2
 80006a4:	9203      	str	r2, [sp, #12]
 80006a6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
 80006aa:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80006ae:	07da      	lsls	r2, r3, #31
 80006b0:	f140 812e 	bpl.w	8000910 <cbvprintf+0x3a8>
			width = va_arg(ap, int);
 80006b4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 80006b8:	f1b8 0f00 	cmp.w	r8, #0
 80006bc:	da07      	bge.n	80006ce <cbvprintf+0x166>
				conv->flag_dash = true;
 80006be:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80006c2:	f042 0204 	orr.w	r2, r2, #4
 80006c6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
 80006ca:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
 80006ce:	075e      	lsls	r6, r3, #29
 80006d0:	f140 8127 	bpl.w	8000922 <cbvprintf+0x3ba>
			int arg = va_arg(ap, int);
 80006d4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 80006d8:	f1ba 0f00 	cmp.w	sl, #0
 80006dc:	f280 8126 	bge.w	800092c <cbvprintf+0x3c4>
				conv->prec_present = false;
 80006e0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80006e4:	f36f 0341 	bfc	r3, #1, #1
 80006e8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 80006ec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80006f0:	e11c      	b.n	800092c <cbvprintf+0x3c4>
		switch (*sp) {
 80006f2:	2a2d      	cmp	r2, #45	; 0x2d
 80006f4:	d00d      	beq.n	8000712 <cbvprintf+0x1aa>
 80006f6:	2a30      	cmp	r2, #48	; 0x30
 80006f8:	f47f af69 	bne.w	80005ce <cbvprintf+0x66>
 80006fc:	2301      	movs	r3, #1
	} while (loop);
 80006fe:	e758      	b.n	80005b2 <cbvprintf+0x4a>
		switch (*sp) {
 8000700:	f04f 0c01 	mov.w	ip, #1
 8000704:	e755      	b.n	80005b2 <cbvprintf+0x4a>
 8000706:	f04f 0e01 	mov.w	lr, #1
 800070a:	e752      	b.n	80005b2 <cbvprintf+0x4a>
 800070c:	f04f 0801 	mov.w	r8, #1
 8000710:	e74f      	b.n	80005b2 <cbvprintf+0x4a>
 8000712:	2601      	movs	r6, #1
 8000714:	e74d      	b.n	80005b2 <cbvprintf+0x4a>
		val = 10U * val + *sp++ - '0';
 8000716:	fb0e 6202 	mla	r2, lr, r2, r6
 800071a:	3a30      	subs	r2, #48	; 0x30
 800071c:	4603      	mov	r3, r0
 800071e:	4618      	mov	r0, r3
 8000720:	f810 6b01 	ldrb.w	r6, [r0], #1
 8000724:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000728:	f1bc 0f09 	cmp.w	ip, #9
 800072c:	d9f3      	bls.n	8000716 <cbvprintf+0x1ae>
	if (sp != wp) {
 800072e:	4299      	cmp	r1, r3
 8000730:	d08f      	beq.n	8000652 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 8000732:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 8000736:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 8000738:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 800073a:	f362 0141 	bfi	r1, r2, #1, #1
 800073e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 8000742:	e786      	b.n	8000652 <cbvprintf+0xea>
 8000744:	460b      	mov	r3, r1
	size_t val = 0;
 8000746:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000748:	f04f 0e0a 	mov.w	lr, #10
 800074c:	e7e7      	b.n	800071e <cbvprintf+0x1b6>
		conv->prec_star = true;
 800074e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000752:	f042 0204 	orr.w	r2, r2, #4
 8000756:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 800075a:	3302      	adds	r3, #2
	switch (*sp) {
 800075c:	781a      	ldrb	r2, [r3, #0]
 800075e:	2a6c      	cmp	r2, #108	; 0x6c
 8000760:	d047      	beq.n	80007f2 <cbvprintf+0x28a>
 8000762:	d82b      	bhi.n	80007bc <cbvprintf+0x254>
 8000764:	2a68      	cmp	r2, #104	; 0x68
 8000766:	d031      	beq.n	80007cc <cbvprintf+0x264>
 8000768:	2a6a      	cmp	r2, #106	; 0x6a
 800076a:	d04b      	beq.n	8000804 <cbvprintf+0x29c>
 800076c:	2a4c      	cmp	r2, #76	; 0x4c
 800076e:	d051      	beq.n	8000814 <cbvprintf+0x2ac>
	conv->specifier = *sp++;
 8000770:	461a      	mov	r2, r3
 8000772:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000776:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
 8000778:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
 800077a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
 800077e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
 8000782:	f200 80be 	bhi.w	8000902 <cbvprintf+0x39a>
 8000786:	2b6d      	cmp	r3, #109	; 0x6d
 8000788:	d851      	bhi.n	800082e <cbvprintf+0x2c6>
 800078a:	2b69      	cmp	r3, #105	; 0x69
 800078c:	f200 80b9 	bhi.w	8000902 <cbvprintf+0x39a>
 8000790:	2b57      	cmp	r3, #87	; 0x57
 8000792:	d867      	bhi.n	8000864 <cbvprintf+0x2fc>
 8000794:	2b41      	cmp	r3, #65	; 0x41
 8000796:	d003      	beq.n	80007a0 <cbvprintf+0x238>
 8000798:	3b45      	subs	r3, #69	; 0x45
 800079a:	2b02      	cmp	r3, #2
 800079c:	f200 80b1 	bhi.w	8000902 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 80007a0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80007a4:	2204      	movs	r2, #4
 80007a6:	f362 0302 	bfi	r3, r2, #0, #3
 80007aa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 80007ae:	2301      	movs	r3, #1
			break;
 80007b0:	e073      	b.n	800089a <cbvprintf+0x332>
		val = 10U * val + *sp++ - '0';
 80007b2:	fb0c 0202 	mla	r2, ip, r2, r0
 80007b6:	3a30      	subs	r2, #48	; 0x30
 80007b8:	460b      	mov	r3, r1
 80007ba:	e75d      	b.n	8000678 <cbvprintf+0x110>
	switch (*sp) {
 80007bc:	2a74      	cmp	r2, #116	; 0x74
 80007be:	d025      	beq.n	800080c <cbvprintf+0x2a4>
 80007c0:	2a7a      	cmp	r2, #122	; 0x7a
 80007c2:	d1d5      	bne.n	8000770 <cbvprintf+0x208>
		conv->length_mod = LENGTH_Z;
 80007c4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80007c8:	2106      	movs	r1, #6
 80007ca:	e00c      	b.n	80007e6 <cbvprintf+0x27e>
		if (*++sp == 'h') {
 80007cc:	785a      	ldrb	r2, [r3, #1]
 80007ce:	2a68      	cmp	r2, #104	; 0x68
 80007d0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80007d4:	d106      	bne.n	80007e4 <cbvprintf+0x27c>
			conv->length_mod = LENGTH_HH;
 80007d6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 80007d8:	f361 02c6 	bfi	r2, r1, #3, #4
 80007dc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 80007e0:	3302      	adds	r3, #2
 80007e2:	e7c5      	b.n	8000770 <cbvprintf+0x208>
			conv->length_mod = LENGTH_H;
 80007e4:	2102      	movs	r1, #2
 80007e6:	f361 02c6 	bfi	r2, r1, #3, #4
 80007ea:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 80007ee:	3301      	adds	r3, #1
 80007f0:	e7be      	b.n	8000770 <cbvprintf+0x208>
		if (*++sp == 'l') {
 80007f2:	785a      	ldrb	r2, [r3, #1]
 80007f4:	2a6c      	cmp	r2, #108	; 0x6c
 80007f6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80007fa:	d101      	bne.n	8000800 <cbvprintf+0x298>
			conv->length_mod = LENGTH_LL;
 80007fc:	2104      	movs	r1, #4
 80007fe:	e7eb      	b.n	80007d8 <cbvprintf+0x270>
			conv->length_mod = LENGTH_L;
 8000800:	2103      	movs	r1, #3
 8000802:	e7f0      	b.n	80007e6 <cbvprintf+0x27e>
		conv->length_mod = LENGTH_J;
 8000804:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000808:	2105      	movs	r1, #5
 800080a:	e7ec      	b.n	80007e6 <cbvprintf+0x27e>
		conv->length_mod = LENGTH_T;
 800080c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000810:	2107      	movs	r1, #7
 8000812:	e7e8      	b.n	80007e6 <cbvprintf+0x27e>
		conv->unsupported = true;
 8000814:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8000818:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800081c:	f022 0202 	bic.w	r2, r2, #2
 8000820:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000824:	f042 0202 	orr.w	r2, r2, #2
 8000828:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 800082c:	e7df      	b.n	80007ee <cbvprintf+0x286>
	switch (conv->specifier) {
 800082e:	3b6e      	subs	r3, #110	; 0x6e
 8000830:	b2d9      	uxtb	r1, r3
 8000832:	2301      	movs	r3, #1
 8000834:	408b      	lsls	r3, r1
 8000836:	f240 4182 	movw	r1, #1154	; 0x482
 800083a:	420b      	tst	r3, r1
 800083c:	d137      	bne.n	80008ae <cbvprintf+0x346>
 800083e:	f013 0f24 	tst.w	r3, #36	; 0x24
 8000842:	d151      	bne.n	80008e8 <cbvprintf+0x380>
 8000844:	07d8      	lsls	r0, r3, #31
 8000846:	d55c      	bpl.n	8000902 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 8000848:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800084c:	2103      	movs	r1, #3
 800084e:	f361 0302 	bfi	r3, r1, #0, #3
 8000852:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000856:	f002 0378 	and.w	r3, r2, #120	; 0x78
 800085a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 800085e:	424b      	negs	r3, r1
 8000860:	414b      	adcs	r3, r1
 8000862:	e01a      	b.n	800089a <cbvprintf+0x332>
	switch (conv->specifier) {
 8000864:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 8000868:	b2c9      	uxtb	r1, r1
 800086a:	2001      	movs	r0, #1
 800086c:	fa00 f101 	lsl.w	r1, r0, r1
 8000870:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 8000874:	d194      	bne.n	80007a0 <cbvprintf+0x238>
 8000876:	f640 0601 	movw	r6, #2049	; 0x801
 800087a:	4231      	tst	r1, r6
 800087c:	d11d      	bne.n	80008ba <cbvprintf+0x352>
 800087e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 8000882:	d03e      	beq.n	8000902 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 8000884:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000888:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 800088c:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8000890:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
 8000892:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000896:	d034      	beq.n	8000902 <cbvprintf+0x39a>
	bool unsupported = false;
 8000898:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 800089a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800089e:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80008a2:	430b      	orrs	r3, r1
 80008a4:	f363 0241 	bfi	r2, r3, #1, #1
 80008a8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 80008ac:	e6fd      	b.n	80006aa <cbvprintf+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 80008ae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80008b2:	2102      	movs	r1, #2
 80008b4:	f361 0302 	bfi	r3, r1, #0, #3
 80008b8:	e7e8      	b.n	800088c <cbvprintf+0x324>
 80008ba:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
 80008be:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008c0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 80008c4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008c8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 80008ca:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 80008ce:	bf02      	ittt	eq
 80008d0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 80008d4:	f041 0101 	orreq.w	r1, r1, #1
 80008d8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 80008dc:	2b63      	cmp	r3, #99	; 0x63
 80008de:	d1db      	bne.n	8000898 <cbvprintf+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80008e0:	1e13      	subs	r3, r2, #0
 80008e2:	bf18      	it	ne
 80008e4:	2301      	movne	r3, #1
 80008e6:	e7d8      	b.n	800089a <cbvprintf+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 80008e8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80008ec:	2103      	movs	r1, #3
 80008ee:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
 80008f2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 80008f6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 80008fa:	bf14      	ite	ne
 80008fc:	2301      	movne	r3, #1
 80008fe:	2300      	moveq	r3, #0
 8000900:	e7cb      	b.n	800089a <cbvprintf+0x332>
		conv->invalid = true;
 8000902:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 800090e:	e7c3      	b.n	8000898 <cbvprintf+0x330>
		} else if (conv->width_present) {
 8000910:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 8000914:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8000916:	bfb4      	ite	lt
 8000918:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
 800091c:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
 8000920:	e6d5      	b.n	80006ce <cbvprintf+0x166>
		} else if (conv->prec_present) {
 8000922:	0798      	lsls	r0, r3, #30
 8000924:	f57f aee2 	bpl.w	80006ec <cbvprintf+0x184>
			precision = conv->prec_value;
 8000928:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
 800092c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
 8000930:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8000932:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000936:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
 800093a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 800093e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8000940:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8000944:	d133      	bne.n	80009ae <cbvprintf+0x446>
			switch (length_mod) {
 8000946:	1ecb      	subs	r3, r1, #3
 8000948:	2b04      	cmp	r3, #4
 800094a:	d804      	bhi.n	8000956 <cbvprintf+0x3ee>
 800094c:	e8df f003 	tbb	[pc, r3]
 8000950:	10464610 	.word	0x10464610
 8000954:	10          	.byte	0x10
 8000955:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8000956:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 8000958:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 800095a:	ea4f 72e3 	mov.w	r2, r3, asr #31
 800095e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8000962:	d10b      	bne.n	800097c <cbvprintf+0x414>
				value->sint = (char)value->sint;
 8000964:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000968:	930e      	str	r3, [sp, #56]	; 0x38
 800096a:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
 800096c:	930f      	str	r3, [sp, #60]	; 0x3c
 800096e:	e007      	b.n	8000980 <cbvprintf+0x418>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000970:	f854 3b04 	ldr.w	r3, [r4], #4
 8000974:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 8000976:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 800097a:	e002      	b.n	8000982 <cbvprintf+0x41a>
			} else if (length_mod == LENGTH_H) {
 800097c:	2902      	cmp	r1, #2
 800097e:	d011      	beq.n	80009a4 <cbvprintf+0x43c>
				value->sint = va_arg(ap, int);
 8000980:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 8000982:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000986:	f013 0603 	ands.w	r6, r3, #3
 800098a:	d047      	beq.n	8000a1c <cbvprintf+0x4b4>
			OUTS(sp, fp);
 800098c:	9b03      	ldr	r3, [sp, #12]
 800098e:	463a      	mov	r2, r7
 8000990:	4659      	mov	r1, fp
 8000992:	4648      	mov	r0, r9
 8000994:	f002 f84f 	bl	8002a36 <outs>
 8000998:	2800      	cmp	r0, #0
 800099a:	f2c0 814a 	blt.w	8000c32 <cbvprintf+0x6ca>
 800099e:	4405      	add	r5, r0
			continue;
 80009a0:	9f03      	ldr	r7, [sp, #12]
 80009a2:	e5e9      	b.n	8000578 <cbvprintf+0x10>
				value->sint = (short)value->sint;
 80009a4:	b21a      	sxth	r2, r3
 80009a6:	920e      	str	r2, [sp, #56]	; 0x38
 80009a8:	f343 33c0 	sbfx	r3, r3, #15, #1
 80009ac:	e7de      	b.n	800096c <cbvprintf+0x404>
		} else if (specifier_cat == SPECIFIER_UINT) {
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d124      	bne.n	80009fc <cbvprintf+0x494>
			switch (length_mod) {
 80009b2:	1ecb      	subs	r3, r1, #3
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	d804      	bhi.n	80009c2 <cbvprintf+0x45a>
 80009b8:	e8df f003 	tbb	[pc, r3]
 80009bc:	18101018 	.word	0x18101018
 80009c0:	18          	.byte	0x18
 80009c1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 80009c2:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
 80009c4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 80009c8:	f04f 0200 	mov.w	r2, #0
 80009cc:	d014      	beq.n	80009f8 <cbvprintf+0x490>
			} else if (length_mod == LENGTH_H) {
 80009ce:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 80009d0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 80009d4:	d1d5      	bne.n	8000982 <cbvprintf+0x41a>
				value->uint = (unsigned short)value->uint;
 80009d6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 80009d8:	930e      	str	r3, [sp, #56]	; 0x38
 80009da:	e7d2      	b.n	8000982 <cbvprintf+0x41a>
					(uint_value_type)va_arg(ap,
 80009dc:	3407      	adds	r4, #7
 80009de:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 80009e2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80009e6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 80009ea:	e7ca      	b.n	8000982 <cbvprintf+0x41a>
					(uint_value_type)va_arg(ap, size_t);
 80009ec:	f854 3b04 	ldr.w	r3, [r4], #4
 80009f0:	930e      	str	r3, [sp, #56]	; 0x38
 80009f2:	2300      	movs	r3, #0
 80009f4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 80009f6:	e7c4      	b.n	8000982 <cbvprintf+0x41a>
				value->uint = (unsigned char)value->uint;
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	e7bc      	b.n	8000976 <cbvprintf+0x40e>
		} else if (specifier_cat == SPECIFIER_FP) {
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d108      	bne.n	8000a12 <cbvprintf+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 8000a00:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 8000a02:	f024 0407 	bic.w	r4, r4, #7
 8000a06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000a0a:	3408      	adds	r4, #8
 8000a0c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000a10:	e7b7      	b.n	8000982 <cbvprintf+0x41a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d1b5      	bne.n	8000982 <cbvprintf+0x41a>
			value->ptr = va_arg(ap, void *);
 8000a16:	f854 3b04 	ldr.w	r3, [r4], #4
 8000a1a:	e7dd      	b.n	80009d8 <cbvprintf+0x470>
		switch (conv->specifier) {
 8000a1c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000a20:	2878      	cmp	r0, #120	; 0x78
 8000a22:	d8bd      	bhi.n	80009a0 <cbvprintf+0x438>
 8000a24:	2862      	cmp	r0, #98	; 0x62
 8000a26:	d81c      	bhi.n	8000a62 <cbvprintf+0x4fa>
 8000a28:	2825      	cmp	r0, #37	; 0x25
 8000a2a:	f43f adad 	beq.w	8000588 <cbvprintf+0x20>
 8000a2e:	2858      	cmp	r0, #88	; 0x58
 8000a30:	d1b6      	bne.n	80009a0 <cbvprintf+0x438>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000a32:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000a3c:	ab08      	add	r3, sp, #32
 8000a3e:	aa10      	add	r2, sp, #64	; 0x40
 8000a40:	f001 ffb3 	bl	80029aa <encode_uint>
			if (precision >= 0) {
 8000a44:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000a48:	4607      	mov	r7, r0
			if (precision >= 0) {
 8000a4a:	f280 809a 	bge.w	8000b82 <cbvprintf+0x61a>
		if (bps == NULL) {
 8000a4e:	2f00      	cmp	r7, #0
 8000a50:	d0a6      	beq.n	80009a0 <cbvprintf+0x438>
		size_t nj_len = (bpe - bps);
 8000a52:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000a56:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 8000a58:	2e00      	cmp	r6, #0
 8000a5a:	f000 80c1 	beq.w	8000be0 <cbvprintf+0x678>
			nj_len += 1U;
 8000a5e:	3001      	adds	r0, #1
 8000a60:	e0be      	b.n	8000be0 <cbvprintf+0x678>
		switch (conv->specifier) {
 8000a62:	3863      	subs	r0, #99	; 0x63
 8000a64:	2815      	cmp	r0, #21
 8000a66:	d89b      	bhi.n	80009a0 <cbvprintf+0x438>
 8000a68:	a201      	add	r2, pc, #4	; (adr r2, 8000a70 <cbvprintf+0x508>)
 8000a6a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000a6e:	bf00      	nop
 8000a70:	08000b45 	.word	0x08000b45
 8000a74:	08000b57 	.word	0x08000b57
 8000a78:	080009a1 	.word	0x080009a1
 8000a7c:	080009a1 	.word	0x080009a1
 8000a80:	080009a1 	.word	0x080009a1
 8000a84:	080009a1 	.word	0x080009a1
 8000a88:	08000b57 	.word	0x08000b57
 8000a8c:	080009a1 	.word	0x080009a1
 8000a90:	080009a1 	.word	0x080009a1
 8000a94:	080009a1 	.word	0x080009a1
 8000a98:	080009a1 	.word	0x080009a1
 8000a9c:	08000be5 	.word	0x08000be5
 8000aa0:	08000b7d 	.word	0x08000b7d
 8000aa4:	08000ba3 	.word	0x08000ba3
 8000aa8:	080009a1 	.word	0x080009a1
 8000aac:	080009a1 	.word	0x080009a1
 8000ab0:	08000ac9 	.word	0x08000ac9
 8000ab4:	080009a1 	.word	0x080009a1
 8000ab8:	08000b7d 	.word	0x08000b7d
 8000abc:	080009a1 	.word	0x080009a1
 8000ac0:	080009a1 	.word	0x080009a1
 8000ac4:	08000b7d 	.word	0x08000b7d
			if (precision >= 0) {
 8000ac8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 8000acc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 8000ace:	db35      	blt.n	8000b3c <cbvprintf+0x5d4>
				len = strnlen(bps, precision);
 8000ad0:	4651      	mov	r1, sl
 8000ad2:	4638      	mov	r0, r7
 8000ad4:	f001 ffe1 	bl	8002a9a <strnlen>
			bpe = bps + len;
 8000ad8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 8000adc:	2f00      	cmp	r7, #0
 8000ade:	f43f af5f 	beq.w	80009a0 <cbvprintf+0x438>
		char sign = 0;
 8000ae2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 8000ae4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000ae8:	f013 0210 	ands.w	r2, r3, #16
 8000aec:	9205      	str	r2, [sp, #20]
 8000aee:	f000 8093 	beq.w	8000c18 <cbvprintf+0x6b0>
			nj_len += 2U;
 8000af2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8000af4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 8000af6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 8000af8:	bf48      	it	mi
 8000afa:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 8000afc:	9204      	str	r2, [sp, #16]
 8000afe:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
 8000b00:	bf48      	it	mi
 8000b02:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 8000b04:	f1b8 0f00 	cmp.w	r8, #0
 8000b08:	f340 80a0 	ble.w	8000c4c <cbvprintf+0x6e4>
			if (!conv->flag_dash) {
 8000b0c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 8000b10:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 8000b14:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000b18:	0750      	lsls	r0, r2, #29
 8000b1a:	9306      	str	r3, [sp, #24]
 8000b1c:	f100 8096 	bmi.w	8000c4c <cbvprintf+0x6e4>
				if (conv->flag_zero) {
 8000b20:	0651      	lsls	r1, r2, #25
 8000b22:	f140 8089 	bpl.w	8000c38 <cbvprintf+0x6d0>
					if (sign != 0) {
 8000b26:	b13e      	cbz	r6, 8000b38 <cbvprintf+0x5d0>
						OUTC(sign);
 8000b28:	4659      	mov	r1, fp
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	47c8      	blx	r9
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	db7f      	blt.n	8000c32 <cbvprintf+0x6ca>
 8000b32:	9b06      	ldr	r3, [sp, #24]
 8000b34:	3501      	adds	r5, #1
 8000b36:	461e      	mov	r6, r3
					pad = '0';
 8000b38:	2230      	movs	r2, #48	; 0x30
 8000b3a:	e07e      	b.n	8000c3a <cbvprintf+0x6d2>
				len = strlen(bps);
 8000b3c:	4638      	mov	r0, r7
 8000b3e:	f001 ffa5 	bl	8002a8c <strlen>
 8000b42:	e7c9      	b.n	8000ad8 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000b46:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
 8000b4a:	2600      	movs	r6, #0
			bps = buf;
 8000b4c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 8000b4e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
 8000b52:	2001      	movs	r0, #1
 8000b54:	e7c6      	b.n	8000ae4 <cbvprintf+0x57c>
			if (conv->flag_plus) {
 8000b56:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 8000b58:	bf5c      	itt	pl
 8000b5a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 8000b5e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
 8000b60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
 8000b64:	bf48      	it	mi
 8000b66:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f6bf af62 	bge.w	8000a32 <cbvprintf+0x4ca>
				value->uint = (uint_value_type)-sint;
 8000b6e:	4252      	negs	r2, r2
 8000b70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
 8000b78:	262d      	movs	r6, #45	; 0x2d
 8000b7a:	e75a      	b.n	8000a32 <cbvprintf+0x4ca>
		switch (conv->specifier) {
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	e758      	b.n	8000a32 <cbvprintf+0x4ca>
		char sign = 0;
 8000b80:	2600      	movs	r6, #0
				conv->flag_zero = false;
 8000b82:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 8000b86:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000b8a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 8000b8c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000b90:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 8000b92:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 8000b96:	f67f af5a 	bls.w	8000a4e <cbvprintf+0x4e6>
					conv->pad0_value = precision - (int)len;
 8000b9a:	ebaa 0303 	sub.w	r3, sl, r3
 8000b9e:	9311      	str	r3, [sp, #68]	; 0x44
 8000ba0:	e755      	b.n	8000a4e <cbvprintf+0x4e6>
			if (value->ptr != NULL) {
 8000ba2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000ba4:	b390      	cbz	r0, 8000c0c <cbvprintf+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000ba6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	aa10      	add	r2, sp, #64	; 0x40
 8000bae:	ab08      	add	r3, sp, #32
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f001 fefa 	bl	80029aa <encode_uint>
				conv->altform_0c = true;
 8000bb6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8000bba:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000bbe:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
 8000bc6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000bca:	4607      	mov	r7, r0
				conv->altform_0c = true;
 8000bcc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8000bd0:	dad6      	bge.n	8000b80 <cbvprintf+0x618>
		if (bps == NULL) {
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	f43f aee4 	beq.w	80009a0 <cbvprintf+0x438>
		size_t nj_len = (bpe - bps);
 8000bd8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000bdc:	1a18      	subs	r0, r3, r0
		char sign = 0;
 8000bde:	2600      	movs	r6, #0
 8000be0:	469a      	mov	sl, r3
 8000be2:	e77f      	b.n	8000ae4 <cbvprintf+0x57c>
				store_count(conv, value->ptr, count);
 8000be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 8000be6:	2907      	cmp	r1, #7
 8000be8:	f63f aeda 	bhi.w	80009a0 <cbvprintf+0x438>
 8000bec:	e8df f001 	tbb	[pc, r1]
 8000bf0:	0c06040c 	.word	0x0c06040c
 8000bf4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8000bf8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 8000bfa:	e6d1      	b.n	80009a0 <cbvprintf+0x438>
		*(short *)dp = (short)count;
 8000bfc:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 8000bfe:	e6cf      	b.n	80009a0 <cbvprintf+0x438>
		*(intmax_t *)dp = (intmax_t)count;
 8000c00:	17ea      	asrs	r2, r5, #31
 8000c02:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 8000c06:	e6cb      	b.n	80009a0 <cbvprintf+0x438>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000c08:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 8000c0a:	e6c9      	b.n	80009a0 <cbvprintf+0x438>
 8000c0c:	4f2e      	ldr	r7, [pc, #184]	; (8000cc8 <cbvprintf+0x760>)
		char sign = 0;
 8000c0e:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000c10:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
 8000c14:	2005      	movs	r0, #5
 8000c16:	e765      	b.n	8000ae4 <cbvprintf+0x57c>
		} else if (conv->altform_0) {
 8000c18:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8000c1a:	bf48      	it	mi
 8000c1c:	3001      	addmi	r0, #1
 8000c1e:	e769      	b.n	8000af4 <cbvprintf+0x58c>
 8000c20:	9307      	str	r3, [sp, #28]
					OUTC(pad);
 8000c22:	4610      	mov	r0, r2
 8000c24:	9206      	str	r2, [sp, #24]
 8000c26:	4659      	mov	r1, fp
 8000c28:	47c8      	blx	r9
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000c30:	da04      	bge.n	8000c3c <cbvprintf+0x6d4>
#undef OUTS
#undef OUTC
}
 8000c32:	b015      	add	sp, #84	; 0x54
 8000c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000c38:	2220      	movs	r2, #32
					pad = '0';
 8000c3a:	4643      	mov	r3, r8
				while (width-- > 0) {
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	2900      	cmp	r1, #0
 8000c40:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000c44:	dcec      	bgt.n	8000c20 <cbvprintf+0x6b8>
 8000c46:	4445      	add	r5, r8
 8000c48:	1a6d      	subs	r5, r5, r1
 8000c4a:	4698      	mov	r8, r3
		if (sign != 0) {
 8000c4c:	b12e      	cbz	r6, 8000c5a <cbvprintf+0x6f2>
			OUTC(sign);
 8000c4e:	4659      	mov	r1, fp
 8000c50:	4630      	mov	r0, r6
 8000c52:	47c8      	blx	r9
 8000c54:	2800      	cmp	r0, #0
 8000c56:	dbec      	blt.n	8000c32 <cbvprintf+0x6ca>
 8000c58:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000c5a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000c5e:	06da      	lsls	r2, r3, #27
 8000c60:	d401      	bmi.n	8000c66 <cbvprintf+0x6fe>
 8000c62:	071b      	lsls	r3, r3, #28
 8000c64:	d505      	bpl.n	8000c72 <cbvprintf+0x70a>
				OUTC('0');
 8000c66:	4659      	mov	r1, fp
 8000c68:	2030      	movs	r0, #48	; 0x30
 8000c6a:	47c8      	blx	r9
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	dbe0      	blt.n	8000c32 <cbvprintf+0x6ca>
 8000c70:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000c72:	9b05      	ldr	r3, [sp, #20]
 8000c74:	b133      	cbz	r3, 8000c84 <cbvprintf+0x71c>
				OUTC(conv->specifier);
 8000c76:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000c7a:	4659      	mov	r1, fp
 8000c7c:	47c8      	blx	r9
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	dbd7      	blt.n	8000c32 <cbvprintf+0x6ca>
 8000c82:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000c84:	9e04      	ldr	r6, [sp, #16]
 8000c86:	442e      	add	r6, r5
 8000c88:	e005      	b.n	8000c96 <cbvprintf+0x72e>
				OUTC('0');
 8000c8a:	4659      	mov	r1, fp
 8000c8c:	2030      	movs	r0, #48	; 0x30
 8000c8e:	47c8      	blx	r9
 8000c90:	2800      	cmp	r0, #0
 8000c92:	dbce      	blt.n	8000c32 <cbvprintf+0x6ca>
 8000c94:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000c96:	1b73      	subs	r3, r6, r5
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	dcf6      	bgt.n	8000c8a <cbvprintf+0x722>
			OUTS(bps, bpe);
 8000c9c:	4653      	mov	r3, sl
 8000c9e:	463a      	mov	r2, r7
 8000ca0:	4659      	mov	r1, fp
 8000ca2:	4648      	mov	r0, r9
 8000ca4:	f001 fec7 	bl	8002a36 <outs>
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	dbc2      	blt.n	8000c32 <cbvprintf+0x6ca>
 8000cac:	4405      	add	r5, r0
		while (width > 0) {
 8000cae:	44a8      	add	r8, r5
 8000cb0:	eba8 0305 	sub.w	r3, r8, r5
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f77f ae73 	ble.w	80009a0 <cbvprintf+0x438>
			OUTC(' ');
 8000cba:	4659      	mov	r1, fp
 8000cbc:	2020      	movs	r0, #32
 8000cbe:	47c8      	blx	r9
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	dbb6      	blt.n	8000c32 <cbvprintf+0x6ca>
 8000cc4:	3501      	adds	r5, #1
			--width;
 8000cc6:	e7f3      	b.n	8000cb0 <cbvprintf+0x748>
 8000cc8:	080039dd 	.word	0x080039dd

08000ccc <st_stm32f4_init>:
  * @rmtoll FLASH_ACR    ICEN          LL_FLASH_EnableInstCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <st_stm32f4_init+0x34>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cd4:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cdc:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000cde:	f04f 0210 	mov.w	r2, #16
 8000ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8000ce6:	f382 8812 	msr	BASEPRI_MAX, r2
 8000cea:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000cee:	f383 8811 	msr	BASEPRI, r3
 8000cf2:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000cf6:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <st_stm32f4_init+0x38>)
 8000cf8:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <st_stm32f4_init+0x3c>)
 8000cfa:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	4770      	bx	lr
 8000d00:	40023c00 	.word	0x40023c00
 8000d04:	2000002c 	.word	0x2000002c
 8000d08:	00f42400 	.word	0x00f42400

08000d0c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000d0c:	4901      	ldr	r1, [pc, #4]	; (8000d14 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000d0e:	2210      	movs	r2, #16
	str	r2, [r1]
 8000d10:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000d12:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000d14:	e000ed10 	.word	0xe000ed10

08000d18 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000d18:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000d1a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000d1c:	f380 8811 	msr	BASEPRI, r0
	isb
 8000d20:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8000d24:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8000d28:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000d2a:	b662      	cpsie	i
	isb
 8000d2c:	f3bf 8f6f 	isb	sy

	bx	lr
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000d34:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000d36:	2800      	cmp	r0, #0
 8000d38:	db07      	blt.n	8000d4a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <arch_irq_enable+0x18>)
 8000d3c:	0941      	lsrs	r1, r0, #5
 8000d3e:	2301      	movs	r3, #1
 8000d40:	f000 001f 	and.w	r0, r0, #31
 8000d44:	4083      	lsls	r3, r0
 8000d46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000d50:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000d52:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	bfa8      	it	ge
 8000d56:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8000d5a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	bfb8      	it	lt
 8000d60:	4b06      	ldrlt	r3, [pc, #24]	; (8000d7c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000d66:	bfac      	ite	ge
 8000d68:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	bfb4      	ite	lt
 8000d74:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed14 	.word	0xe000ed14

08000d80 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000d80:	bf30      	wfi
    b z_SysNmiOnReset
 8000d82:	f7ff bffd 	b.w	8000d80 <z_SysNmiOnReset>
 8000d86:	bf00      	nop

08000d88 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000d88:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8000d8a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <z_arm_prep_c+0x44>)
 8000d8e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000d92:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d98:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8000d9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000da0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000da8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8000dac:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000db0:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8000db4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000db8:	f001 f842 	bl	8001e40 <z_bss_zero>
	z_data_copy();
 8000dbc:	f001 fc32 	bl	8002624 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000dc0:	f000 f9b8 	bl	8001134 <z_arm_interrupt_init>
	z_cstart();
 8000dc4:	f001 f88a 	bl	8001edc <z_cstart>
 8000dc8:	08000000 	.word	0x08000000
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000dd2:	490a      	ldr	r1, [pc, #40]	; (8000dfc <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000dd4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000dd6:	6809      	ldr	r1, [r1, #0]
 8000dd8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000dda:	4909      	ldr	r1, [pc, #36]	; (8000e00 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8000ddc:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000dde:	684b      	ldr	r3, [r1, #4]
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	604b      	str	r3, [r1, #4]
 8000de6:	2300      	movs	r3, #0
 8000de8:	f383 8811 	msr	BASEPRI, r3
 8000dec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000df0:	6893      	ldr	r3, [r2, #8]
}
 8000df2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000300 	.word	0x20000300
 8000dfc:	0800392c 	.word	0x0800392c
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000e04:	4912      	ldr	r1, [pc, #72]	; (8000e50 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000e06:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000e08:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8000e0c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000e0e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000e12:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000e16:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8000e18:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000e1c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000e20:	4f0c      	ldr	r7, [pc, #48]	; (8000e54 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000e22:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000e26:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8000e28:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000e2a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000e2c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8000e2e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000e30:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000e32:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8000e36:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8000e38:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8000e3a:	f000 f9bf 	bl	80011bc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8000e3e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000e42:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8000e46:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000e4a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8000e4e:	4770      	bx	lr
    ldr r1, =_kernel
 8000e50:	20000300 	.word	0x20000300
    ldr v4, =_SCS_ICSR
 8000e54:	e000ed04 	.word	0xe000ed04

08000e58 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8000e58:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000e5c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000e5e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000e62:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000e66:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000e68:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000e6c:	2902      	cmp	r1, #2
    beq _oops
 8000e6e:	d0ff      	beq.n	8000e70 <_oops>

08000e70 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000e70:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8000e72:	f001 fdfc 	bl	8002a6e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8000e76:	bd01      	pop	{r0, pc}

08000e78 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000e78:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8000e7c:	9b00      	ldr	r3, [sp, #0]
 8000e7e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8000e82:	490a      	ldr	r1, [pc, #40]	; (8000eac <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8000e84:	9b01      	ldr	r3, [sp, #4]
 8000e86:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8000e8a:	9b02      	ldr	r3, [sp, #8]
 8000e8c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8000e90:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e98:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8000e9c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000ea0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000ea2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8000ea4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8000ea6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	08002997 	.word	0x08002997

08000eb0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8000eb0:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <z_check_thread_stack_fail+0x28>)
{
 8000eb2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8000eb4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8000eb6:	b170      	cbz	r0, 8000ed6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8000eb8:	f113 0f16 	cmn.w	r3, #22
 8000ebc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8000ebe:	d005      	beq.n	8000ecc <z_check_thread_stack_fail+0x1c>
 8000ec0:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d805      	bhi.n	8000ed4 <z_check_thread_stack_fail+0x24>
 8000ec8:	4283      	cmp	r3, r0
 8000eca:	d203      	bcs.n	8000ed4 <z_check_thread_stack_fail+0x24>
		return 0;
 8000ecc:	4281      	cmp	r1, r0
 8000ece:	bf28      	it	cs
 8000ed0:	2000      	movcs	r0, #0
 8000ed2:	4770      	bx	lr
 8000ed4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000300 	.word	0x20000300

08000edc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8000edc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <arch_switch_to_main_thread+0x28>)
{
 8000ee0:	460d      	mov	r5, r1
 8000ee2:	4614      	mov	r4, r2
	_current = main_thread;
 8000ee4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8000ee6:	f000 f969 	bl	80011bc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8000eea:	4620      	mov	r0, r4
 8000eec:	f385 8809 	msr	PSP, r5
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	b663      	cpsie	if
 8000ef4:	f381 8811 	msr	BASEPRI, r1
 8000ef8:	f3bf 8f6f 	isb	sy
 8000efc:	2200      	movs	r2, #0
 8000efe:	2300      	movs	r3, #0
 8000f00:	f001 fd49 	bl	8002996 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8000f04:	20000300 	.word	0x20000300

08000f08 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8000f08:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8000f0a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8000f0e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8000f12:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8000f16:	4904      	ldr	r1, [pc, #16]	; (8000f28 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8000f18:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8000f1a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8000f1c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8000f1e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8000f22:	4902      	ldr	r1, [pc, #8]	; (8000f2c <_isr_wrapper+0x24>)
	bx r1
 8000f24:	4708      	bx	r1
 8000f26:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8000f28:	080033e4 	.word	0x080033e4
	ldr r1, =z_arm_int_exit
 8000f2c:	08000f31 	.word	0x08000f31

08000f30 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8000f32:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8000f34:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8000f36:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8000f38:	d003      	beq.n	8000f42 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8000f3a:	4903      	ldr	r1, [pc, #12]	; (8000f48 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8000f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8000f40:	600a      	str	r2, [r1, #0]

08000f42 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8000f42:	4770      	bx	lr
	ldr r3, =_kernel
 8000f44:	20000300 	.word	0x20000300
	ldr r1, =_SCS_ICSR
 8000f48:	e000ed04 	.word	0xe000ed04

08000f4c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <bus_fault.constprop.0+0x38>)
 8000f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8000f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8000f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f54:	0592      	lsls	r2, r2, #22
 8000f56:	d508      	bpl.n	8000f6a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8000f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8000f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f5c:	0412      	lsls	r2, r2, #16
 8000f5e:	d504      	bpl.n	8000f6a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8000f60:	b118      	cbz	r0, 8000f6a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8000f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8000f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8000f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f6e:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8000f72:	bf58      	it	pl
 8000f74:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8000f76:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8000f78:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8000f7a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000f7e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8000f80:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <mem_manage_fault.constprop.0+0x78>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 8000f8a:	b570      	push	{r4, r5, r6, lr}
 8000f8c:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8000f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f94:	0792      	lsls	r2, r2, #30
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 8000f96:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000f98:	d522      	bpl.n	8000fe0 <mem_manage_fault.constprop.0+0x58>
		uint32_t temp = SCB->MMFAR;
 8000f9a:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8000f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f9e:	0614      	lsls	r4, r2, #24
 8000fa0:	d51e      	bpl.n	8000fe0 <mem_manage_fault.constprop.0+0x58>
			if (from_hard_fault != 0) {
 8000fa2:	b119      	cbz	r1, 8000fac <mem_manage_fault.constprop.0+0x24>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8000fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8000fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000fae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8000fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fb2:	4c13      	ldr	r4, [pc, #76]	; (8001000 <mem_manage_fault.constprop.0+0x78>)
 8000fb4:	f012 0f10 	tst.w	r2, #16
 8000fb8:	d115      	bne.n	8000fe6 <mem_manage_fault.constprop.0+0x5e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8000fbc:	0799      	lsls	r1, r3, #30
 8000fbe:	d412      	bmi.n	8000fe6 <mem_manage_fault.constprop.0+0x5e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8000fc0:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000fc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <mem_manage_fault.constprop.0+0x78>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000fc6:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8000fc8:	bf42      	ittt	mi
 8000fca:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
 8000fcc:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
 8000fd0:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8000fd2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000fd4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000fd8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	702b      	strb	r3, [r5, #0]
}
 8000fde:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 8000fe0:	f06f 0015 	mvn.w	r0, #21
 8000fe4:	e7e2      	b.n	8000fac <mem_manage_fault.constprop.0+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8000fe6:	6863      	ldr	r3, [r4, #4]
 8000fe8:	051a      	lsls	r2, r3, #20
 8000fea:	d5e9      	bpl.n	8000fc0 <mem_manage_fault.constprop.0+0x38>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8000fec:	4631      	mov	r1, r6
 8000fee:	f7ff ff5f 	bl	8000eb0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d0e4      	beq.n	8000fc0 <mem_manage_fault.constprop.0+0x38>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000ff6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	e7e1      	b.n	8000fc2 <mem_manage_fault.constprop.0+0x3a>
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8001004:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001006:	4b41      	ldr	r3, [pc, #260]	; (800110c <z_arm_fault+0x108>)
 8001008:	685b      	ldr	r3, [r3, #4]
{
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800100e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001012:	2600      	movs	r6, #0
 8001014:	f386 8811 	msr	BASEPRI, r6
 8001018:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800101c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 8001020:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8001024:	d111      	bne.n	800104a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8001026:	f002 000c 	and.w	r0, r2, #12
 800102a:	2808      	cmp	r0, #8
 800102c:	d00d      	beq.n	800104a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 800102e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8001030:	bf4c      	ite	mi
 8001032:	460d      	movmi	r5, r1
			*nested_exc = true;
 8001034:	2601      	movpl	r6, #1
	*recoverable = false;
 8001036:	2200      	movs	r2, #0
	switch (fault) {
 8001038:	3b03      	subs	r3, #3
	*recoverable = false;
 800103a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 800103e:	2b03      	cmp	r3, #3
 8001040:	d83b      	bhi.n	80010ba <z_arm_fault+0xb6>
 8001042:	e8df f003 	tbb	[pc, r3]
 8001046:	5304      	.short	0x5304
 8001048:	5b57      	.short	0x5b57
		return NULL;
 800104a:	4635      	mov	r5, r6
 800104c:	e7f3      	b.n	8001036 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800104e:	4b2f      	ldr	r3, [pc, #188]	; (800110c <z_arm_fault+0x108>)
 8001050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001052:	0791      	lsls	r1, r2, #30
 8001054:	d431      	bmi.n	80010ba <z_arm_fault+0xb6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8001056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001058:	2a00      	cmp	r2, #0
 800105a:	db2e      	blt.n	80010ba <z_arm_fault+0xb6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800105c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800105e:	0052      	lsls	r2, r2, #1
 8001060:	d52b      	bpl.n	80010ba <z_arm_fault+0xb6>
	uint16_t fault_insn = *(ret_addr - 1);
 8001062:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001064:	f832 1c02 	ldrh.w	r1, [r2, #-2]
 8001068:	f64d 7202 	movw	r2, #57090	; 0xdf02
 800106c:	4291      	cmp	r1, r2
 800106e:	d00a      	beq.n	8001086 <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
 8001070:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001074:	b14a      	cbz	r2, 800108a <z_arm_fault+0x86>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001076:	f10d 0207 	add.w	r2, sp, #7
 800107a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800107c:	4628      	mov	r0, r5
 800107e:	f7ff ff83 	bl	8000f88 <mem_manage_fault.constprop.0>
 8001082:	4604      	mov	r4, r0
		break;
 8001084:	e01a      	b.n	80010bc <z_arm_fault+0xb8>
			reason = esf->basic.r0;
 8001086:	682c      	ldr	r4, [r5, #0]
 8001088:	e018      	b.n	80010bc <z_arm_fault+0xb8>
		} else if (SCB_BFSR != 0) {
 800108a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800108e:	b12a      	cbz	r2, 800109c <z_arm_fault+0x98>
			reason = bus_fault(esf, 1, recoverable);
 8001090:	f10d 0107 	add.w	r1, sp, #7
 8001094:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8001096:	f7ff ff59 	bl	8000f4c <bus_fault.constprop.0>
 800109a:	e7f2      	b.n	8001082 <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
 800109c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800109e:	b292      	uxth	r2, r2
 80010a0:	b15a      	cbz	r2, 80010ba <z_arm_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80010a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80010a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80010a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80010a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80010aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80010ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80010ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010b0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80010b4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
 80010ba:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80010bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010c0:	b993      	cbnz	r3, 80010e8 <z_arm_fault+0xe4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80010c2:	2220      	movs	r2, #32
 80010c4:	4629      	mov	r1, r5
 80010c6:	a802      	add	r0, sp, #8
 80010c8:	f001 fcf0 	bl	8002aac <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80010cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010ce:	b1be      	cbz	r6, 8001100 <z_arm_fault+0xfc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80010d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80010d4:	b922      	cbnz	r2, 80010e0 <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80010d6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80010da:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80010de:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 80010e0:	a902      	add	r1, sp, #8
 80010e2:	4620      	mov	r0, r4
 80010e4:	f001 fcc1 	bl	8002a6a <z_arm_fatal_error>
}
 80010e8:	b00a      	add	sp, #40	; 0x28
 80010ea:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 80010ec:	f10d 0207 	add.w	r2, sp, #7
 80010f0:	2100      	movs	r1, #0
 80010f2:	e7c3      	b.n	800107c <z_arm_fault+0x78>
		reason = bus_fault(esf, 0, recoverable);
 80010f4:	f10d 0107 	add.w	r1, sp, #7
 80010f8:	2000      	movs	r0, #0
 80010fa:	e7cc      	b.n	8001096 <z_arm_fault+0x92>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <z_arm_fault+0x108>)
 80010fe:	e7d0      	b.n	80010a2 <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001100:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	e7e9      	b.n	80010de <z_arm_fault+0xda>
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001110:	4a02      	ldr	r2, [pc, #8]	; (800111c <z_arm_fault_init+0xc>)
 8001112:	6953      	ldr	r3, [r2, #20]
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001120:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001124:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001128:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800112a:	4672      	mov	r2, lr
	bl z_arm_fault
 800112c:	f7ff ff6a 	bl	8001004 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8001130:	bd01      	pop	{r0, pc}
 8001132:	bf00      	nop

08001134 <z_arm_interrupt_init>:
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	2110      	movs	r1, #16
 800113a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800113c:	3301      	adds	r3, #1
 800113e:	2b5b      	cmp	r3, #91	; 0x5b
 8001140:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8001144:	d1f9      	bne.n	800113a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100

0800114c <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800114c:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800114e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8001152:	4808      	ldr	r0, [pc, #32]	; (8001174 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001154:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 8001158:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800115a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800115e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8001162:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001164:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8001166:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800116a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800116e:	f7ff fe0b 	bl	8000d88 <z_arm_prep_c>
 8001172:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001174:	20000340 	.word	0x20000340

08001178 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <z_impl_k_thread_abort+0x24>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4283      	cmp	r3, r0
 800117e:	d10b      	bne.n	8001198 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001180:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8001184:	b143      	cbz	r3, 8001198 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <z_impl_k_thread_abort+0x28>)
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800118e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8001190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 8001198:	f001 b9e4 	b.w	8002564 <z_thread_abort>
 800119c:	20000300 	.word	0x20000300
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80011a4:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <z_arm_configure_static_mpu_regions+0xc>)
 80011a6:	4a03      	ldr	r2, [pc, #12]	; (80011b4 <z_arm_configure_static_mpu_regions+0x10>)
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <z_arm_configure_static_mpu_regions+0x14>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	f000 b870 	b.w	8001290 <arm_core_mpu_configure_static_mpu_regions>
 80011b0:	20030000 	.word	0x20030000
 80011b4:	20000000 	.word	0x20000000
 80011b8:	08003768 	.word	0x08003768

080011bc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80011bc:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 80011c0:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 80011c2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 80011c6:	2140      	movs	r1, #64	; 0x40
 80011c8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80011cc:	4618      	mov	r0, r3
 80011ce:	2101      	movs	r1, #1
 80011d0:	f000 b868 	b.w	80012a4 <arm_core_mpu_configure_dynamic_mpu_regions>
 80011d4:	20000178 	.word	0x20000178
 80011d8:	150b0000 	.word	0x150b0000

080011dc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 80011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 80011de:	4e20      	ldr	r6, [pc, #128]	; (8001260 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80011e0:	2500      	movs	r5, #0
 80011e2:	428d      	cmp	r5, r1
 80011e4:	db01      	blt.n	80011ea <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80011e6:	4610      	mov	r0, r2
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 80011ea:	6844      	ldr	r4, [r0, #4]
 80011ec:	b374      	cbz	r4, 800124c <mpu_configure_regions+0x70>
		if (do_sanity_check &&
 80011ee:	b153      	cbz	r3, 8001206 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 80011f0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 80011f4:	ea14 0f0c 	tst.w	r4, ip
 80011f8:	d12f      	bne.n	800125a <mpu_configure_regions+0x7e>
		&&
 80011fa:	2c1f      	cmp	r4, #31
 80011fc:	d92d      	bls.n	800125a <mpu_configure_regions+0x7e>
		((part->start & (part->size - 1U)) == 0U);
 80011fe:	6807      	ldr	r7, [r0, #0]
		&&
 8001200:	ea1c 0f07 	tst.w	ip, r7
 8001204:	d129      	bne.n	800125a <mpu_configure_regions+0x7e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8001206:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8001208:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800120a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 800120e:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
 8001212:	d91e      	bls.n	8001252 <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
 8001214:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8001218:	d81d      	bhi.n	8001256 <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800121a:	3c01      	subs	r4, #1
 800121c:	fab4 f484 	clz	r4, r4
 8001220:	f1c4 041f 	rsb	r4, r4, #31
 8001224:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8001226:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800122a:	ea4c 0c04 	orr.w	ip, ip, r4
 800122e:	d814      	bhi.n	800125a <mpu_configure_regions+0x7e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001230:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
 8001234:	4314      	orrs	r4, r2
 8001236:	f044 0410 	orr.w	r4, r4, #16
 800123a:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800123e:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001242:	f04c 0401 	orr.w	r4, ip, #1
 8001246:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
 800124a:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
 800124c:	3501      	adds	r5, #1
 800124e:	300c      	adds	r0, #12
 8001250:	e7c7      	b.n	80011e2 <mpu_configure_regions+0x6>
		return REGION_32B;
 8001252:	2408      	movs	r4, #8
 8001254:	e7e7      	b.n	8001226 <mpu_configure_regions+0x4a>
		return REGION_4G;
 8001256:	243e      	movs	r4, #62	; 0x3e
 8001258:	e7e5      	b.n	8001226 <mpu_configure_regions+0x4a>
			return -EINVAL;
 800125a:	f06f 0215 	mvn.w	r2, #21
 800125e:	e7c2      	b.n	80011e6 <mpu_configure_regions+0xa>
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <arm_core_mpu_enable+0x14>)
 8001266:	2205      	movs	r2, #5
 8001268:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 800126c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001270:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800127c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001280:	4b02      	ldr	r3, [pc, #8]	; (800128c <arm_core_mpu_disable+0x10>)
 8001282:	2200      	movs	r2, #0
 8001284:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8001290:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8001292:	4c03      	ldr	r4, [pc, #12]	; (80012a0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8001294:	2301      	movs	r3, #1
 8001296:	7822      	ldrb	r2, [r4, #0]
 8001298:	f7ff ffa0 	bl	80011dc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 800129c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 800129e:	bd10      	pop	{r4, pc}
 80012a0:	20000334 	.word	0x20000334

080012a4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 80012a4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 80012a8:	2300      	movs	r3, #0
 80012aa:	7812      	ldrb	r2, [r2, #0]
 80012ac:	f7ff ff96 	bl	80011dc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80012b0:	f110 0f16 	cmn.w	r0, #22
 80012b4:	d002      	beq.n	80012bc <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80012b6:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80012b8:	2807      	cmp	r0, #7
 80012ba:	dd00      	ble.n	80012be <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 80012bc:	bd08      	pop	{r3, pc}
 80012be:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 80012c2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80012c6:	3001      	adds	r0, #1
 80012c8:	e7f6      	b.n	80012b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 80012ca:	bf00      	nop
 80012cc:	20000334 	.word	0x20000334
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 80012d4:	4914      	ldr	r1, [pc, #80]	; (8001328 <z_arm_mpu_init+0x54>)
 80012d6:	6808      	ldr	r0, [r1, #0]
 80012d8:	2808      	cmp	r0, #8
{
 80012da:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 80012dc:	d821      	bhi.n	8001322 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80012de:	f7ff ffcd 	bl	800127c <arm_core_mpu_disable>
 80012e2:	4c12      	ldr	r4, [pc, #72]	; (800132c <z_arm_mpu_init+0x58>)
 80012e4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80012e6:	2200      	movs	r2, #0
 80012e8:	4290      	cmp	r0, r2
 80012ea:	f101 010c 	add.w	r1, r1, #12
 80012ee:	d105      	bne.n	80012fc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <z_arm_mpu_init+0x5c>)
 80012f2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80012f4:	f7ff ffb6 	bl	8001264 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80012f8:	2000      	movs	r0, #0
}
 80012fa:	bd10      	pop	{r4, pc}
 80012fc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001300:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8001304:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8001308:	4313      	orrs	r3, r2
 800130a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800130e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800131e:	3201      	adds	r2, #1
 8001320:	e7e2      	b.n	80012e8 <z_arm_mpu_init+0x14>
		return -1;
 8001322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001326:	e7e8      	b.n	80012fa <z_arm_mpu_init+0x26>
 8001328:	08003774 	.word	0x08003774
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	20000334 	.word	0x20000334

08001334 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8001334:	4b01      	ldr	r3, [pc, #4]	; (800133c <__stdout_hook_install+0x8>)
 8001336:	6018      	str	r0, [r3, #0]
}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000004 	.word	0x20000004

08001340 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8001340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001344:	4f0d      	ldr	r7, [pc, #52]	; (800137c <__stm32_exti_isr.isra.0+0x3c>)
 8001346:	4604      	mov	r4, r0
 8001348:	460e      	mov	r6, r1
 800134a:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800134c:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001350:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8001354:	42b4      	cmp	r4, r6
 8001356:	db01      	blt.n	800135c <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8001358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800135c:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800135e:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8001362:	ea33 0202 	bics.w	r2, r3, r2
 8001366:	d107      	bne.n	8001378 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001368:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 800136a:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 800136e:	b11b      	cbz	r3, 8001378 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8001370:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8001374:	4620      	mov	r0, r4
 8001376:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8001378:	3401      	adds	r4, #1
 800137a:	e7eb      	b.n	8001354 <__stm32_exti_isr.isra.0+0x14>
 800137c:	40013c00 	.word	0x40013c00

08001380 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8001382:	2301      	movs	r3, #1
 8001384:	6811      	ldr	r1, [r2, #0]
 8001386:	4083      	lsls	r3, r0
 8001388:	430b      	orrs	r3, r1
 800138a:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 800138c:	4b02      	ldr	r3, [pc, #8]	; (8001398 <stm32_exti_enable+0x18>)
 800138e:	5618      	ldrsb	r0, [r3, r0]
 8001390:	f7ff bcd0 	b.w	8000d34 <arch_irq_enable>
 8001394:	40013c00 	.word	0x40013c00
 8001398:	08003a10 	.word	0x08003a10

0800139c <stm32_exti_disable>:
	if (line < 32) {
 800139c:	281f      	cmp	r0, #31
 800139e:	dc06      	bgt.n	80013ae <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80013a0:	4903      	ldr	r1, [pc, #12]	; (80013b0 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 80013a2:	2201      	movs	r2, #1
 80013a4:	680b      	ldr	r3, [r1, #0]
 80013a6:	4082      	lsls	r2, r0
 80013a8:	ea23 0302 	bic.w	r3, r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
}
 80013ae:	4770      	bx	lr
 80013b0:	40013c00 	.word	0x40013c00

080013b4 <stm32_exti_trigger>:
	switch (trigger) {
 80013b4:	2903      	cmp	r1, #3
 80013b6:	d82a      	bhi.n	800140e <stm32_exti_trigger+0x5a>
 80013b8:	e8df f001 	tbb	[pc, r1]
 80013bc:	1f140e02 	.word	0x1f140e02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <stm32_exti_trigger+0x5c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 80013c2:	2201      	movs	r2, #1
 80013c4:	6899      	ldr	r1, [r3, #8]
 80013c6:	4082      	lsls	r2, r0
 80013c8:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 80013cc:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80013ce:	68d9      	ldr	r1, [r3, #12]
 80013d0:	ea21 0202 	bic.w	r2, r1, r2
 80013d4:	60da      	str	r2, [r3, #12]
}
 80013d6:	4770      	bx	lr
  SET_BIT(EXTI->RTSR, ExtiLine);
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80013da:	2201      	movs	r2, #1
 80013dc:	6899      	ldr	r1, [r3, #8]
 80013de:	4082      	lsls	r2, r0
 80013e0:	4311      	orrs	r1, r2
 80013e2:	e7f3      	b.n	80013cc <stm32_exti_trigger+0x18>
  SET_BIT(EXTI->FTSR, ExtiLine);
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80013e6:	2201      	movs	r2, #1
 80013e8:	68d9      	ldr	r1, [r3, #12]
 80013ea:	4082      	lsls	r2, r0
 80013ec:	4311      	orrs	r1, r2
 80013ee:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80013f0:	6899      	ldr	r1, [r3, #8]
 80013f2:	ea21 0202 	bic.w	r2, r1, r2
 80013f6:	609a      	str	r2, [r3, #8]
}
 80013f8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80013fa:	2301      	movs	r3, #1
 80013fc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <stm32_exti_trigger+0x5c>)
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	4302      	orrs	r2, r0
 8001406:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	4310      	orrs	r0, r2
 800140c:	60d8      	str	r0, [r3, #12]
}
 800140e:	4770      	bx	lr
 8001410:	40013c00 	.word	0x40013c00

08001414 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <stm32_exti_set_callback+0x20>)
{
 8001416:	b510      	push	{r4, lr}
 8001418:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 800141a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800141e:	b928      	cbnz	r0, 800142c <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8001420:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8001424:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001428:	605a      	str	r2, [r3, #4]

	return 0;
}
 800142a:	bd10      	pop	{r4, pc}
		return -EBUSY;
 800142c:	f06f 000f 	mvn.w	r0, #15
 8001430:	e7fb      	b.n	800142a <stm32_exti_set_callback+0x16>
 8001432:	bf00      	nop
 8001434:	20000184 	.word	0x20000184

08001438 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <stm32_exti_unset_callback+0x10>)
 800143a:	2200      	movs	r2, #0
 800143c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8001440:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001444:	605a      	str	r2, [r3, #4]
}
 8001446:	4770      	bx	lr
 8001448:	20000184 	.word	0x20000184

0800144c <stm32_clock_control_get_subsys_rate>:
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800144c:	6809      	ldr	r1, [r1, #0]
	uint32_t ahb_clock = SystemCoreClock;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <stm32_clock_control_get_subsys_rate+0x34>)
	switch (pclken->bus) {
 8001450:	2940      	cmp	r1, #64	; 0x40
	uint32_t ahb_clock = SystemCoreClock;
 8001452:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 8001454:	d00d      	beq.n	8001472 <stm32_clock_control_get_subsys_rate+0x26>
 8001456:	d808      	bhi.n	800146a <stm32_clock_control_get_subsys_rate+0x1e>
 8001458:	f021 0004 	bic.w	r0, r1, #4
 800145c:	2830      	cmp	r0, #48	; 0x30
 800145e:	d009      	beq.n	8001474 <stm32_clock_control_get_subsys_rate+0x28>
 8001460:	2938      	cmp	r1, #56	; 0x38
 8001462:	d007      	beq.n	8001474 <stm32_clock_control_get_subsys_rate+0x28>
 8001464:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001468:	4770      	bx	lr
 800146a:	2944      	cmp	r1, #68	; 0x44
 800146c:	d005      	beq.n	800147a <stm32_clock_control_get_subsys_rate+0x2e>
 800146e:	29a8      	cmp	r1, #168	; 0xa8
 8001470:	e7f7      	b.n	8001462 <stm32_clock_control_get_subsys_rate+0x16>
	return clock / prescaler;
 8001472:	089b      	lsrs	r3, r3, #2
		break;
#endif
#if defined(STM32_CLOCK_BUS_APB3)
	case STM32_CLOCK_BUS_APB3:
		/* STM32WL: AHB3 and APB3 share the same clock and prescaler. */
		*rate = ahb3_clock;
 8001474:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8001476:	2000      	movs	r0, #0
}
 8001478:	4770      	bx	lr
	return clock / prescaler;
 800147a:	085b      	lsrs	r3, r3, #1
		break;
 800147c:	e7fa      	b.n	8001474 <stm32_clock_control_get_subsys_rate+0x28>
 800147e:	bf00      	nop
 8001480:	2000002c 	.word	0x2000002c

08001484 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8001484:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001486:	4c3a      	ldr	r4, [pc, #232]	; (8001570 <stm32_clock_control_init+0xec>)

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001488:	4e3a      	ldr	r6, [pc, #232]	; (8001574 <stm32_clock_control_init+0xf0>)
	config_enable_default_clocks();
 800148a:	f000 f88d 	bl	80015a8 <config_enable_default_clocks>
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 800148e:	f000 fb9b 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001492:	68a3      	ldr	r3, [r4, #8]
 8001494:	4a38      	ldr	r2, [pc, #224]	; (8001578 <stm32_clock_control_init+0xf4>)
 8001496:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 80014a0:	42b5      	cmp	r5, r6
 80014a2:	d802      	bhi.n	80014aa <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 80014a4:	4835      	ldr	r0, [pc, #212]	; (800157c <stm32_clock_control_init+0xf8>)
 80014a6:	f000 fbbd 	bl	8001c24 <LL_SetFlashLatency>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b0:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <stm32_clock_control_init+0xec>)
 80014bc:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 80014be:	0394      	lsls	r4, r2, #14
 80014c0:	d5fc      	bpl.n	80014bc <stm32_clock_control_init+0x38>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	f002 020c 	and.w	r2, r2, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80014c8:	2a08      	cmp	r2, #8
 80014ca:	d117      	bne.n	80014fc <stm32_clock_control_init+0x78>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80014d2:	609a      	str	r2, [r3, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014d4:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 80014d6:	0790      	lsls	r0, r2, #30
 80014d8:	d407      	bmi.n	80014ea <stm32_clock_control_init+0x66>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014e2:	4a23      	ldr	r2, [pc, #140]	; (8001570 <stm32_clock_control_init+0xec>)
 80014e4:	6813      	ldr	r3, [r2, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 80014e6:	0799      	lsls	r1, r3, #30
 80014e8:	d5fc      	bpl.n	80014e4 <stm32_clock_control_init+0x60>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <stm32_clock_control_init+0xec>)
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	f022 0203 	bic.w	r2, r2, #3
 80014f2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014f4:	689a      	ldr	r2, [r3, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80014f6:	f012 0f0c 	tst.w	r2, #12
 80014fa:	d1fb      	bne.n	80014f4 <stm32_clock_control_init+0x70>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80014fc:	4c1c      	ldr	r4, [pc, #112]	; (8001570 <stm32_clock_control_init+0xec>)
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001504:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8001506:	6863      	ldr	r3, [r4, #4]
 8001508:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800150c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001510:	6063      	str	r3, [r4, #4]
	config_pll_sysclock();
 8001512:	f000 f837 	bl	8001584 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151c:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800151e:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 8001520:	019b      	lsls	r3, r3, #6
 8001522:	d5fc      	bpl.n	800151e <stm32_clock_control_init+0x9a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001524:	68a3      	ldr	r3, [r4, #8]
 8001526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800152a:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800152c:	68a3      	ldr	r3, [r4, #8]
 800152e:	f023 0303 	bic.w	r3, r3, #3
 8001532:	f043 0302 	orr.w	r3, r3, #2
 8001536:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001538:	4c0d      	ldr	r4, [pc, #52]	; (8001570 <stm32_clock_control_init+0xec>)
 800153a:	68a3      	ldr	r3, [r4, #8]
 800153c:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8001540:	2b08      	cmp	r3, #8
 8001542:	d1fa      	bne.n	800153a <stm32_clock_control_init+0xb6>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001544:	42b5      	cmp	r5, r6
 8001546:	d902      	bls.n	800154e <stm32_clock_control_init+0xca>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <stm32_clock_control_init+0xf8>)
 800154a:	f000 fb6b 	bl	8001c24 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <stm32_clock_control_init+0xfc>)
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <stm32_clock_control_init+0xf8>)
 8001552:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001554:	68a3      	ldr	r3, [r4, #8]
 8001556:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800155a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800155e:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001560:	68a3      	ldr	r3, [r4, #8]
 8001562:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800156a:	60a3      	str	r3, [r4, #8]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800156c:	2000      	movs	r0, #0
 800156e:	bd70      	pop	{r4, r5, r6, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	0a0379ff 	.word	0x0a0379ff
 8001578:	08003a7d 	.word	0x08003a7d
 800157c:	0a037a00 	.word	0x0a037a00
 8001580:	2000002c 	.word	0x2000002c

08001584 <config_pll_sysclock>:
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <config_pll_sysclock+0x18>)
 8001586:	4906      	ldr	r1, [pc, #24]	; (80015a0 <config_pll_sysclock+0x1c>)
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4011      	ands	r1, r2
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <config_pll_sysclock+0x20>)
 800158e:	430a      	orrs	r2, r1
 8001590:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001598:	605a      	str	r2, [r3, #4]
{
	LL_RCC_PLL_ConfigDomain_SYS(get_pll_source(),
				    pllm(STM32_PLL_M_DIVISOR),
				    STM32_PLL_N_MULTIPLIER,
				    pllp(STM32_PLL_P_DIVISOR));
}
 800159a:	4770      	bx	lr
 800159c:	40023800 	.word	0x40023800
 80015a0:	ffbf8000 	.word	0xffbf8000
 80015a4:	00405408 	.word	0x00405408

080015a8 <config_enable_default_clocks>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <config_enable_default_clocks+0x1c>)
 80015aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80015b4:	b082      	sub	sp, #8
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015bc:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 80015be:	b002      	add	sp, #8
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 80015c8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <uart_console_init+0x24>)
 80015cc:	4808      	ldr	r0, [pc, #32]	; (80015f0 <uart_console_init+0x28>)
 80015ce:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 80015d0:	f001 fd42 	bl	8003058 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 80015d4:	b138      	cbz	r0, 80015e6 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 80015d6:	4807      	ldr	r0, [pc, #28]	; (80015f4 <uart_console_init+0x2c>)
 80015d8:	f7ff feac 	bl	8001334 <__stdout_hook_install>
	__printk_hook_install(console_out);
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <uart_console_init+0x2c>)
 80015de:	f7fe ffaf 	bl	8000540 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 80015e2:	2000      	movs	r0, #0
}
 80015e4:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80015e6:	f06f 0012 	mvn.w	r0, #18
 80015ea:	e7fb      	b.n	80015e4 <uart_console_init+0x1c>
 80015ec:	2000023c 	.word	0x2000023c
 80015f0:	080033cc 	.word	0x080033cc
 80015f4:	080015f9 	.word	0x080015f9

080015f8 <console_out>:
	if ('\n' == c) {
 80015f8:	280a      	cmp	r0, #10
{
 80015fa:	b538      	push	{r3, r4, r5, lr}
 80015fc:	4d07      	ldr	r5, [pc, #28]	; (800161c <console_out+0x24>)
 80015fe:	4604      	mov	r4, r0
	if ('\n' == c) {
 8001600:	d104      	bne.n	800160c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 8001602:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8001604:	6883      	ldr	r3, [r0, #8]
 8001606:	210d      	movs	r1, #13
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 800160c:	6828      	ldr	r0, [r5, #0]
 800160e:	6883      	ldr	r3, [r0, #8]
 8001610:	b2e1      	uxtb	r1, r4
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4798      	blx	r3
}
 8001616:	4620      	mov	r0, r4
 8001618:	bd38      	pop	{r3, r4, r5, pc}
 800161a:	bf00      	nop
 800161c:	2000023c 	.word	0x2000023c

08001620 <clock_control_on.constprop.0>:
 *
 * @param dev Device structure whose driver controls the clock.
 * @param sys Opaque data representing the clock.
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
 8001620:	b570      	push	{r4, r5, r6, lr}
 8001622:	4605      	mov	r5, r0
 8001624:	4c07      	ldr	r4, [pc, #28]	; (8001644 <clock_control_on.constprop.0+0x24>)
 8001626:	4620      	mov	r0, r4
 8001628:	f001 fd16 	bl	8003058 <z_device_is_ready>
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 800162c:	b130      	cbz	r0, 800163c <clock_control_on.constprop.0+0x1c>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800162e:	68a3      	ldr	r3, [r4, #8]
 8001630:	4629      	mov	r1, r5
 8001632:	4620      	mov	r0, r4
 8001634:	681b      	ldr	r3, [r3, #0]
}
 8001636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->on(dev, sys);
 800163a:	4718      	bx	r3
}
 800163c:	f06f 0012 	mvn.w	r0, #18
 8001640:	bd70      	pop	{r4, r5, r6, pc}
 8001642:	bf00      	nop
 8001644:	08003294 	.word	0x08003294

08001648 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8001648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800164a:	4617      	mov	r7, r2
	const struct gpio_stm32_config *cfg = dev->config;
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 800164c:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 8001650:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8001652:	6902      	ldr	r2, [r0, #16]
{
 8001654:	460c      	mov	r4, r1
 8001656:	461d      	mov	r5, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001658:	d124      	bne.n	80016a4 <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800165a:	f001 0203 	and.w	r2, r1, #3
 800165e:	3204      	adds	r2, #4
 8001660:	0092      	lsls	r2, r2, #2
 8001662:	230f      	movs	r3, #15
 8001664:	4093      	lsls	r3, r2
 8001666:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4932      	ldr	r1, [pc, #200]	; (8001738 <gpio_stm32_pin_interrupt_configure+0xf0>)
 800166e:	3202      	adds	r2, #2
 8001670:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001674:	0c19      	lsrs	r1, r3, #16
 8001676:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 800167e:	fab2 f282 	clz	r2, r2
 8001682:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001684:	68b2      	ldr	r2, [r6, #8]
 8001686:	429a      	cmp	r2, r3
 8001688:	d109      	bne.n	800169e <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 800168a:	4620      	mov	r0, r4
 800168c:	f7ff fe86 	bl	800139c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001690:	4620      	mov	r0, r4
 8001692:	f7ff fed1 	bl	8001438 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001696:	2100      	movs	r1, #0
 8001698:	4620      	mov	r0, r4
 800169a:	f7ff fe8b 	bl	80013b4 <stm32_exti_trigger>
	int err = 0;
 800169e:	2000      	movs	r0, #0

	stm32_exti_enable(pin);

exit:
	return err;
}
 80016a0:	b003      	add	sp, #12
 80016a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 80016a4:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 80016a8:	d03f      	beq.n	800172a <gpio_stm32_pin_interrupt_configure+0xe2>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80016aa:	4924      	ldr	r1, [pc, #144]	; (800173c <gpio_stm32_pin_interrupt_configure+0xf4>)
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7ff feb1 	bl	8001414 <stm32_exti_set_callback>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	d13c      	bne.n	8001730 <gpio_stm32_pin_interrupt_configure+0xe8>
	struct stm32_pclken pclken = {
 80016b6:	4a22      	ldr	r2, [pc, #136]	; (8001740 <gpio_stm32_pin_interrupt_configure+0xf8>)
	gpio_stm32_enable_int(cfg->port, pin);
 80016b8:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 80016ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016be:	466b      	mov	r3, sp
 80016c0:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ffab 	bl	8001620 <clock_control_on.constprop.0>
	if (ret != 0) {
 80016ca:	b9c0      	cbnz	r0, 80016fe <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80016cc:	f004 0303 	and.w	r3, r4, #3
 80016d0:	3304      	adds	r3, #4
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	220f      	movs	r2, #15
 80016d6:	409a      	lsls	r2, r3
 80016d8:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80016dc:	b2d3      	uxtb	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016e4:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80016e8:	0c11      	lsrs	r1, r2, #16
 80016ea:	6898      	ldr	r0, [r3, #8]
 80016ec:	ea20 4012 	bic.w	r0, r0, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 80016f4:	fab2 f282 	clz	r2, r2
 80016f8:	4096      	lsls	r6, r2
 80016fa:	4306      	orrs	r6, r0
 80016fc:	609e      	str	r6, [r3, #8]
	switch (trig) {
 80016fe:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8001702:	d00e      	beq.n	8001722 <gpio_stm32_pin_interrupt_configure+0xda>
 8001704:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8001708:	d00d      	beq.n	8001726 <gpio_stm32_pin_interrupt_configure+0xde>
 800170a:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 800170e:	4259      	negs	r1, r3
 8001710:	4159      	adcs	r1, r3
 8001712:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8001714:	4620      	mov	r0, r4
 8001716:	f7ff fe4d 	bl	80013b4 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff fe30 	bl	8001380 <stm32_exti_enable>
 8001720:	e7bd      	b.n	800169e <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 8001722:	2101      	movs	r1, #1
 8001724:	e7f6      	b.n	8001714 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 8001726:	2103      	movs	r1, #3
 8001728:	e7f4      	b.n	8001714 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 800172a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800172e:	e7b7      	b.n	80016a0 <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 8001730:	f06f 000f 	mvn.w	r0, #15
	return err;
 8001734:	e7b4      	b.n	80016a0 <gpio_stm32_pin_interrupt_configure+0x58>
 8001736:	bf00      	nop
 8001738:	40013800 	.word	0x40013800
 800173c:	08002e25 	.word	0x08002e25
 8001740:	08003740 	.word	0x08003740

08001744 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8001744:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = dev->config;
 8001748:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800174a:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 800174c:	4c35      	ldr	r4, [pc, #212]	; (8001824 <uart_stm32_init+0xe0>)
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 800174e:	f8d5 8004 	ldr.w	r8, [r5, #4]
	data->clock = clk;
 8001752:	607c      	str	r4, [r7, #4]
{
 8001754:	4606      	mov	r6, r0
 8001756:	4620      	mov	r0, r4
 8001758:	f001 fc7e 	bl	8003058 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800175c:	2800      	cmp	r0, #0
 800175e:	d05d      	beq.n	800181c <uart_stm32_init+0xd8>
	return api->on(dev, sys);
 8001760:	68a3      	ldr	r3, [r4, #8]
 8001762:	4620      	mov	r0, r4
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4641      	mov	r1, r8
 8001768:	4798      	blx	r3
	if (err != 0) {
 800176a:	4604      	mov	r4, r0
 800176c:	2800      	cmp	r0, #0
 800176e:	d14c      	bne.n	800180a <uart_stm32_init+0xc6>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8001770:	4601      	mov	r1, r0
 8001772:	aa01      	add	r2, sp, #4
 8001774:	69a8      	ldr	r0, [r5, #24]
 8001776:	f001 fc56 	bl	8003026 <pinctrl_lookup_state>
	if (ret < 0) {
 800177a:	2800      	cmp	r0, #0
 800177c:	da01      	bge.n	8001782 <uart_stm32_init+0x3e>
 800177e:	4604      	mov	r4, r0
 8001780:	e043      	b.n	800180a <uart_stm32_init+0xc6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8001782:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8001784:	4622      	mov	r2, r4
 8001786:	7919      	ldrb	r1, [r3, #4]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	f000 f9d7 	bl	8001b3c <pinctrl_configure_pins>
		}
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 800178e:	2800      	cmp	r0, #0
 8001790:	dbf5      	blt.n	800177e <uart_stm32_init+0x3a>
		return err;
	}

	LL_USART_Disable(config->usart);
 8001792:	682b      	ldr	r3, [r5, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800179a:	60da      	str	r2, [r3, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800179c:	f103 020c 	add.w	r2, r3, #12
 80017a0:	e852 2f00 	ldrex	r2, [r2]
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80017a4:	f042 020c 	orr.w	r2, r2, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017a8:	f103 000c 	add.w	r0, r3, #12
 80017ac:	e840 2100 	strex	r1, r2, [r0]
 80017b0:	2900      	cmp	r1, #0
 80017b2:	d1f3      	bne.n	800179c <uart_stm32_init+0x58>
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 80017b4:	692a      	ldr	r2, [r5, #16]
 80017b6:	2a02      	cmp	r2, #2
 80017b8:	d02b      	beq.n	8001812 <uart_stm32_init+0xce>
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80017ba:	2a01      	cmp	r2, #1
 80017bc:	bf12      	itee	ne
 80017be:	2000      	movne	r0, #0
 80017c0:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 80017c4:	f44f 61c0 	moveq.w	r1, #1536	; 0x600
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	4308      	orrs	r0, r1
 80017cc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80017d0:	4302      	orrs	r2, r0
 80017d2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80017da:	611a      	str	r2, [r3, #16]
	LL_USART_ConfigCharacter(config->usart,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 80017dc:	7b2b      	ldrb	r3, [r5, #12]
 80017de:	b12b      	cbz	r3, 80017ec <uart_stm32_init+0xa8>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 80017e0:	6873      	ldr	r3, [r6, #4]
 80017e2:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80017e4:	6953      	ldr	r3, [r2, #20]
 80017e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017ea:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	4630      	mov	r0, r6
 80017f0:	f001 fbaa 	bl	8002f48 <uart_stm32_set_baudrate>

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 80017f4:	7d2a      	ldrb	r2, [r5, #20]
 80017f6:	682b      	ldr	r3, [r5, #0]
 80017f8:	b11a      	cbz	r2, 8001802 <uart_stm32_init+0xbe>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	f042 0208 	orr.w	r2, r2, #8
 8001800:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001808:	60da      	str	r2, [r3, #12]
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 800180a:	4620      	mov	r0, r4
 800180c:	b002      	add	sp, #8
 800180e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8001812:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8001816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800181a:	e7d5      	b.n	80017c8 <uart_stm32_init+0x84>
		return -ENODEV;
 800181c:	f06f 0412 	mvn.w	r4, #18
 8001820:	e7f3      	b.n	800180a <uart_stm32_init+0xc6>
 8001822:	bf00      	nop
 8001824:	08003294 	.word	0x08003294

08001828 <uart_stm32_configure>:
{
 8001828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800182c:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 800182e:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8001830:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8001832:	2b01      	cmp	r3, #1
{
 8001834:	460c      	mov	r4, r1
	switch (parity) {
 8001836:	d06f      	beq.n	8001918 <uart_stm32_configure+0xf0>
 8001838:	1e9a      	subs	r2, r3, #2
 800183a:	4251      	negs	r1, r2
 800183c:	4151      	adcs	r1, r2
 800183e:	0289      	lsls	r1, r1, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001840:	7962      	ldrb	r2, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8001842:	f894 8006 	ldrb.w	r8, [r4, #6]
 8001846:	2a02      	cmp	r2, #2
 8001848:	bf96      	itet	ls
 800184a:	4f45      	ldrls	r7, [pc, #276]	; (8001960 <uart_stm32_configure+0x138>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800184c:	f44f 5c00 	movhi.w	ip, #8192	; 0x2000
 8001850:	f837 c012 	ldrhls.w	ip, [r7, r2, lsl #1]
	switch (db) {
 8001854:	f1b8 0f04 	cmp.w	r8, #4
 8001858:	d06c      	beq.n	8001934 <uart_stm32_configure+0x10c>
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800185a:	79e7      	ldrb	r7, [r4, #7]
		if (p == UART_CFG_PARITY_NONE) {
 800185c:	2b00      	cmp	r3, #0
 800185e:	d15e      	bne.n	800191e <uart_stm32_configure+0xf6>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8001860:	2f01      	cmp	r7, #1
 8001862:	f022 0202 	bic.w	r2, r2, #2
 8001866:	d073      	beq.n	8001950 <uart_stm32_configure+0x128>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001868:	2a00      	cmp	r2, #0
 800186a:	d063      	beq.n	8001934 <uart_stm32_configure+0x10c>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800186c:	f1b8 0f02 	cmp.w	r8, #2
 8001870:	d960      	bls.n	8001934 <uart_stm32_configure+0x10c>
	return LL_USART_HWCONTROL_NONE;
 8001872:	469e      	mov	lr, r3
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8001874:	682a      	ldr	r2, [r5, #0]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8001876:	b18f      	cbz	r7, 800189c <uart_stm32_configure+0x74>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8001878:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8001964 <uart_stm32_configure+0x13c>
 800187c:	4542      	cmp	r2, r8
 800187e:	d00b      	beq.n	8001898 <uart_stm32_configure+0x70>
 8001880:	f5a8 484c 	sub.w	r8, r8, #52224	; 0xcc00
 8001884:	4542      	cmp	r2, r8
 8001886:	d007      	beq.n	8001898 <uart_stm32_configure+0x70>
 8001888:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 800188c:	4542      	cmp	r2, r8
 800188e:	d003      	beq.n	8001898 <uart_stm32_configure+0x70>
 8001890:	f508 484c 	add.w	r8, r8, #52224	; 0xcc00
 8001894:	4542      	cmp	r2, r8
 8001896:	d14d      	bne.n	8001934 <uart_stm32_configure+0x10c>
 8001898:	2f01      	cmp	r7, #1
 800189a:	d14b      	bne.n	8001934 <uart_stm32_configure+0x10c>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800189c:	68d7      	ldr	r7, [r2, #12]
 800189e:	f427 5700 	bic.w	r7, r7, #8192	; 0x2000
 80018a2:	60d7      	str	r7, [r2, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80018a4:	68d7      	ldr	r7, [r2, #12]
 80018a6:	f407 67c0 	and.w	r7, r7, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 80018aa:	42b9      	cmp	r1, r7
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80018ac:	bf1f      	itttt	ne
 80018ae:	68d7      	ldrne	r7, [r2, #12]
 80018b0:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 80018b4:	4339      	orrne	r1, r7
 80018b6:	60d1      	strne	r1, [r2, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80018b8:	6911      	ldr	r1, [r2, #16]
 80018ba:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80018be:	458c      	cmp	ip, r1
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80018c0:	bf1f      	itttt	ne
 80018c2:	6911      	ldrne	r1, [r2, #16]
 80018c4:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 80018c8:	ea41 010c 	orrne.w	r1, r1, ip
 80018cc:	6111      	strne	r1, [r2, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80018ce:	68d1      	ldr	r1, [r2, #12]
 80018d0:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 80018d4:	4299      	cmp	r1, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80018d6:	bf1f      	itttt	ne
 80018d8:	68d1      	ldrne	r1, [r2, #12]
 80018da:	f421 5180 	bicne.w	r1, r1, #4096	; 0x1000
 80018de:	430b      	orrne	r3, r1
 80018e0:	60d3      	strne	r3, [r2, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80018e2:	6953      	ldr	r3, [r2, #20]
	if (cfg->baudrate != data->baud_rate) {
 80018e4:	6821      	ldr	r1, [r4, #0]
 80018e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80018ea:	459e      	cmp	lr, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80018ec:	bf1f      	itttt	ne
 80018ee:	6953      	ldrne	r3, [r2, #20]
 80018f0:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80018f4:	ea43 030e 	orrne.w	r3, r3, lr
 80018f8:	6153      	strne	r3, [r2, #20]
	if (cfg->baudrate != data->baud_rate) {
 80018fa:	6833      	ldr	r3, [r6, #0]
 80018fc:	4299      	cmp	r1, r3
 80018fe:	d003      	beq.n	8001908 <uart_stm32_configure+0xe0>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8001900:	f001 fb22 	bl	8002f48 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 8001908:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800190a:	68d3      	ldr	r3, [r2, #12]
 800190c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001910:	60d3      	str	r3, [r2, #12]
	return 0;
 8001912:	2000      	movs	r0, #0
};
 8001914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (parity) {
 8001918:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800191c:	e790      	b.n	8001840 <uart_stm32_configure+0x18>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800191e:	3b03      	subs	r3, #3
 8001920:	2f01      	cmp	r7, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001922:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8001924:	d109      	bne.n	800193a <uart_stm32_configure+0x112>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001926:	2b01      	cmp	r3, #1
 8001928:	d904      	bls.n	8001934 <uart_stm32_configure+0x10c>
		return LL_USART_HWCONTROL_RTS_CTS;
 800192a:	f44f 7e40 	mov.w	lr, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800192e:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8001932:	d107      	bne.n	8001944 <uart_stm32_configure+0x11c>
		return -ENOTSUP;
 8001934:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001938:	e7ec      	b.n	8001914 <uart_stm32_configure+0xec>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800193a:	2b01      	cmp	r3, #1
 800193c:	d9fa      	bls.n	8001934 <uart_stm32_configure+0x10c>
	return LL_USART_HWCONTROL_NONE;
 800193e:	f04f 0e00 	mov.w	lr, #0
 8001942:	e7f4      	b.n	800192e <uart_stm32_configure+0x106>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001944:	f1b8 0f02 	cmp.w	r8, #2
 8001948:	d9f4      	bls.n	8001934 <uart_stm32_configure+0x10c>
		return LL_USART_DATAWIDTH_9B;
 800194a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194e:	e791      	b.n	8001874 <uart_stm32_configure+0x4c>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001950:	2a00      	cmp	r2, #0
 8001952:	d0ef      	beq.n	8001934 <uart_stm32_configure+0x10c>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001954:	f1b8 0f02 	cmp.w	r8, #2
 8001958:	d9ec      	bls.n	8001934 <uart_stm32_configure+0x10c>
		return LL_USART_HWCONTROL_RTS_CTS;
 800195a:	f44f 7e40 	mov.w	lr, #768	; 0x300
 800195e:	e789      	b.n	8001874 <uart_stm32_configure+0x4c>
 8001960:	08003930 	.word	0x08003930
 8001964:	40011000 	.word	0x40011000

08001968 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8001968:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800196c:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 800196e:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001970:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001972:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <elapsed+0x34>)
 8001976:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800197a:	4909      	ldr	r1, [pc, #36]	; (80019a0 <elapsed+0x38>)
 800197c:	d101      	bne.n	8001982 <elapsed+0x1a>
	    || (val1 < val2)) {
 800197e:	4282      	cmp	r2, r0
 8001980:	d206      	bcs.n	8001990 <elapsed+0x28>
		overflow_cyc += last_load;
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	680c      	ldr	r4, [r1, #0]
 8001986:	4422      	add	r2, r4
 8001988:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800198a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800198e:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	680a      	ldr	r2, [r1, #0]
 8001994:	4413      	add	r3, r2
}
 8001996:	1a18      	subs	r0, r3, r0
 8001998:	bd10      	pop	{r4, pc}
 800199a:	bf00      	nop
 800199c:	200002f0 	.word	0x200002f0
 80019a0:	200002fc 	.word	0x200002fc

080019a4 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <sys_clock_driver_init+0x28>)
 80019a6:	2210      	movs	r2, #16
 80019a8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <sys_clock_driver_init+0x2c>)
 80019ae:	f244 129f 	movw	r2, #16799	; 0x419f
 80019b2:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <sys_clock_driver_init+0x30>)
 80019b6:	2000      	movs	r0, #0
 80019b8:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 80019ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80019be:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80019c0:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	f042 0207 	orr.w	r2, r2, #7
 80019c8:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00
 80019d0:	200002fc 	.word	0x200002fc
 80019d4:	200002f0 	.word	0x200002f0

080019d8 <sys_clock_isr>:
{
 80019d8:	b508      	push	{r3, lr}
	elapsed();
 80019da:	f7ff ffc5 	bl	8001968 <elapsed>
	cycle_count += overflow_cyc;
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <sys_clock_isr+0x38>)
 80019e0:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <sys_clock_isr+0x3c>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	6811      	ldr	r1, [r2, #0]
 80019e6:	4408      	add	r0, r1
 80019e8:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <sys_clock_isr+0x40>)
 80019f0:	6813      	ldr	r3, [r2, #0]
 80019f2:	f244 11a0 	movw	r1, #16800	; 0x41a0
 80019f6:	1ac0      	subs	r0, r0, r3
 80019f8:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 80019fc:	fb01 3300 	mla	r3, r1, r0, r3
 8001a00:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8001a02:	f000 feff 	bl	8002804 <sys_clock_announce>
}
 8001a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8001a0a:	f7ff ba91 	b.w	8000f30 <z_arm_exc_exit>
 8001a0e:	bf00      	nop
 8001a10:	200002f0 	.word	0x200002f0
 8001a14:	200002f8 	.word	0x200002f8
 8001a18:	200002f4 	.word	0x200002f4

08001a1c <sys_clock_set_timeout>:
{
 8001a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a20:	4e32      	ldr	r6, [pc, #200]	; (8001aec <sys_clock_set_timeout+0xd0>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8001a22:	2900      	cmp	r1, #0
 8001a24:	d055      	beq.n	8001ad2 <sys_clock_set_timeout+0xb6>
 8001a26:	1c42      	adds	r2, r0, #1
 8001a28:	d10a      	bne.n	8001a40 <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001a2a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001a2e:	6913      	ldr	r3, [r2, #16]
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8001a36:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001a3a:	6033      	str	r3, [r6, #0]
}
 8001a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8001a40:	6835      	ldr	r5, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001a42:	2801      	cmp	r0, #1
 8001a44:	dd4b      	ble.n	8001ade <sys_clock_set_timeout+0xc2>
 8001a46:	f240 38e5 	movw	r8, #997	; 0x3e5
 8001a4a:	4540      	cmp	r0, r8
 8001a4c:	dc01      	bgt.n	8001a52 <sys_clock_set_timeout+0x36>
 8001a4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
 8001a52:	f04f 0310 	mov.w	r3, #16
 8001a56:	f3ef 8411 	mrs	r4, BASEPRI
 8001a5a:	f383 8812 	msr	BASEPRI_MAX, r3
 8001a5e:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001a62:	f7ff ff81 	bl	8001968 <elapsed>
	cycle_count += pending;
 8001a66:	4f22      	ldr	r7, [pc, #136]	; (8001af0 <sys_clock_set_timeout+0xd4>)
	val1 = SysTick->VAL;
 8001a68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8001a6c:	2100      	movs	r1, #0
	val1 = SysTick->VAL;
 8001a6e:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	18c2      	adds	r2, r0, r3
	overflow_cyc = 0U;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <sys_clock_set_timeout+0xd8>)
 8001a78:	6019      	str	r1, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <sys_clock_set_timeout+0xdc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8001a7e:	1ad1      	subs	r1, r2, r3
 8001a80:	d430      	bmi.n	8001ae4 <sys_clock_set_timeout+0xc8>
		delay = ticks * CYC_PER_TICK;
 8001a82:	f244 10a0 	movw	r0, #16800	; 0x41a0
		delay += unannounced;
 8001a86:	fb00 1108 	mla	r1, r0, r8, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001a8a:	f501 4183 	add.w	r1, r1, #16768	; 0x4180
		delay -= unannounced;
 8001a8e:	1a9b      	subs	r3, r3, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001a90:	311f      	adds	r1, #31
 8001a92:	fbb1 f1f0 	udiv	r1, r1, r0
		delay -= unannounced;
 8001a96:	fb00 3301 	mla	r3, r0, r1, r3
		delay = MAX(delay, MIN_DELAY);
 8001a9a:	f240 411a 	movw	r1, #1050	; 0x41a
 8001a9e:	428b      	cmp	r3, r1
 8001aa0:	d920      	bls.n	8001ae4 <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
 8001aa2:	4916      	ldr	r1, [pc, #88]	; (8001afc <sys_clock_set_timeout+0xe0>)
 8001aa4:	428b      	cmp	r3, r1
 8001aa6:	bf28      	it	cs
 8001aa8:	460b      	movcs	r3, r1
	val2 = SysTick->VAL;
 8001aaa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 8001aae:	6033      	str	r3, [r6, #0]
	val2 = SysTick->VAL;
 8001ab0:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	614b      	str	r3, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	618b      	str	r3, [r1, #24]
	if (val1 < val2) {
 8001aba:	4584      	cmp	ip, r0
 8001abc:	ebac 0300 	sub.w	r3, ip, r0
		cycle_count += (val1 + (last_load_ - val2));
 8001ac0:	bf38      	it	cc
 8001ac2:	195b      	addcc	r3, r3, r5
		cycle_count += (val1 - val2);
 8001ac4:	441a      	add	r2, r3
 8001ac6:	603a      	str	r2, [r7, #0]
	__asm__ volatile(
 8001ac8:	f384 8811 	msr	BASEPRI, r4
 8001acc:	f3bf 8f6f 	isb	sy
 8001ad0:	e7b4      	b.n	8001a3c <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001ad2:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8001ad4:	6835      	ldr	r5, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001ad6:	d1b4      	bne.n	8001a42 <sys_clock_set_timeout+0x26>
 8001ad8:	f240 30e5 	movw	r0, #997	; 0x3e5
 8001adc:	e7b7      	b.n	8001a4e <sys_clock_set_timeout+0x32>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001ade:	f04f 0800 	mov.w	r8, #0
 8001ae2:	e7b6      	b.n	8001a52 <sys_clock_set_timeout+0x36>
 8001ae4:	f240 431a 	movw	r3, #1050	; 0x41a
 8001ae8:	e7df      	b.n	8001aaa <sys_clock_set_timeout+0x8e>
 8001aea:	bf00      	nop
 8001aec:	200002fc 	.word	0x200002fc
 8001af0:	200002f8 	.word	0x200002f8
 8001af4:	200002f0 	.word	0x200002f0
 8001af8:	200002f4 	.word	0x200002f4
 8001afc:	00ff9420 	.word	0x00ff9420

08001b00 <sys_clock_elapsed>:
{
 8001b00:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001b02:	f04f 0310 	mov.w	r3, #16
 8001b06:	f3ef 8411 	mrs	r4, BASEPRI
 8001b0a:	f383 8812 	msr	BASEPRI_MAX, r3
 8001b0e:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8001b12:	f7ff ff29 	bl	8001968 <elapsed>
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <sys_clock_elapsed+0x34>)
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <sys_clock_elapsed+0x38>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	4403      	add	r3, r0
	__asm__ volatile(
 8001b22:	f384 8811 	msr	BASEPRI, r4
 8001b26:	f3bf 8f6f 	isb	sy
}
 8001b2a:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001b2e:	fbb3 f0f0 	udiv	r0, r3, r0
 8001b32:	bd10      	pop	{r4, pc}
 8001b34:	200002f8 	.word	0x200002f8
 8001b38:	200002f4 	.word	0x200002f4

08001b3c <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8001b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8001b40:	4f20      	ldr	r7, [pc, #128]	; (8001bc4 <pinctrl_configure_pins+0x88>)
 8001b42:	4604      	mov	r4, r0
 8001b44:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 8001b48:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8001b4a:	42b4      	cmp	r4, r6
 8001b4c:	d101      	bne.n	8001b52 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8001b4e:	2000      	movs	r0, #0
 8001b50:	e014      	b.n	8001b7c <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8001b52:	6822      	ldr	r2, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001b54:	06d1      	lsls	r1, r2, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001b56:	f002 091f 	and.w	r9, r2, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001b5a:	d411      	bmi.n	8001b80 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8001b5c:	6865      	ldr	r5, [r4, #4]
 8001b5e:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001b62:	f3c2 1a47 	ubfx	sl, r2, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8001b66:	f3c2 2243 	ubfx	r2, r2, #9, #4
 8001b6a:	2a0a      	cmp	r2, #10
 8001b6c:	d827      	bhi.n	8001bbe <pinctrl_configure_pins+0x82>
	port_device = gpio_ports[STM32_PORT(pin)];
 8001b6e:	f857 8022 	ldr.w	r8, [r7, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001b72:	f1b8 0f00 	cmp.w	r8, #0
 8001b76:	d111      	bne.n	8001b9c <pinctrl_configure_pins+0x60>
		return -ENODEV;
 8001b78:	f06f 0012 	mvn.w	r0, #18
}
 8001b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001b80:	f1b9 0f10 	cmp.w	r9, #16
 8001b84:	d008      	beq.n	8001b98 <pinctrl_configure_pins+0x5c>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 8001b86:	f1b9 0f11 	cmp.w	r9, #17
 8001b8a:	d1ea      	bne.n	8001b62 <pinctrl_configure_pins+0x26>
			uint32_t gpio_out = pins[i].pincfg &
 8001b8c:	6865      	ldr	r5, [r4, #4]
			if (gpio_out != 0) {
 8001b8e:	052b      	lsls	r3, r5, #20
 8001b90:	d5e7      	bpl.n	8001b62 <pinctrl_configure_pins+0x26>
				pin_cgf = pins[i].pincfg | STM32_MODER_OUTPUT_MODE;
 8001b92:	f045 0510 	orr.w	r5, r5, #16
 8001b96:	e7e4      	b.n	8001b62 <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8001b98:	2530      	movs	r5, #48	; 0x30
 8001b9a:	e7e2      	b.n	8001b62 <pinctrl_configure_pins+0x26>
 8001b9c:	4640      	mov	r0, r8
 8001b9e:	f001 fa5b 	bl	8003058 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	d0e8      	beq.n	8001b78 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	462a      	mov	r2, r5
 8001baa:	f00a 010f 	and.w	r1, sl, #15
 8001bae:	4640      	mov	r0, r8
 8001bb0:	f001 f94f 	bl	8002e52 <gpio_stm32_configure>
		if (ret < 0) {
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	f104 0408 	add.w	r4, r4, #8
 8001bba:	dac6      	bge.n	8001b4a <pinctrl_configure_pins+0xe>
 8001bbc:	e7de      	b.n	8001b7c <pinctrl_configure_pins+0x40>
		return -EINVAL;
 8001bbe:	f06f 0015 	mvn.w	r0, #21
 8001bc2:	e7db      	b.n	8001b7c <pinctrl_configure_pins+0x40>
 8001bc4:	080038ec 	.word	0x080038ec

08001bc8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc8:	4913      	ldr	r1, [pc, #76]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001bca:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bcc:	688b      	ldr	r3, [r1, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d01c      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x48>
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d11c      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bda:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bdc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bde:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be4:	bf14      	ite	ne
 8001be6:	480d      	ldrne	r0, [pc, #52]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be8:	480d      	ldreq	r0, [pc, #52]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bea:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001bee:	bf18      	it	ne
 8001bf0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bf2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf6:	fba1 0100 	umull	r0, r1, r1, r0
 8001bfa:	f7fe fad7 	bl	80001ac <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c06:	3301      	adds	r3, #1
 8001c08:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001c0a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c0e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x54>)
 8001c12:	e7fc      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001c16:	e7fa      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x46>
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	007a1200 	.word	0x007a1200
 8001c20:	00f42400 	.word	0x00f42400

08001c24 <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
  ErrorStatus status = SUCCESS;


  /* Frequency cannot be equal to 0 */
  if(HCLK_Frequency == 0U)
 8001c24:	2800      	cmp	r0, #0
 8001c26:	f000 80c1 	beq.w	8001dac <LL_SetFlashLatency+0x188>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8001c2a:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <LL_SetFlashLatency+0x18c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  {
    status = ERROR;
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8001c32:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8001c36:	d14f      	bne.n	8001cd8 <LL_SetFlashLatency+0xb4>
    {
#if defined (UTILS_SCALE1_LATENCY5_FREQ)
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001c38:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
 8001c3c:	f502 528c 	add.w	r2, r2, #4480	; 0x1180
 8001c40:	4290      	cmp	r0, r2
 8001c42:	d908      	bls.n	8001c56 <LL_SetFlashLatency+0x32>
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
    }
#if defined (LL_PWR_REGU_VOLTAGE_SCALE3)
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c50:	f04f 0305 	mov.w	r3, #5
 8001c54:	e03e      	b.n	8001cd4 <LL_SetFlashLatency+0xb0>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001c56:	4a57      	ldr	r2, [pc, #348]	; (8001db4 <LL_SetFlashLatency+0x190>)
 8001c58:	4290      	cmp	r0, r2
 8001c5a:	d81e      	bhi.n	8001c9a <LL_SetFlashLatency+0x76>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001c5c:	4a56      	ldr	r2, [pc, #344]	; (8001db8 <LL_SetFlashLatency+0x194>)
 8001c5e:	4290      	cmp	r0, r2
 8001c60:	d823      	bhi.n	8001caa <LL_SetFlashLatency+0x86>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001c62:	4a56      	ldr	r2, [pc, #344]	; (8001dbc <LL_SetFlashLatency+0x198>)
 8001c64:	4290      	cmp	r0, r2
 8001c66:	d828      	bhi.n	8001cba <LL_SetFlashLatency+0x96>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001c68:	4a55      	ldr	r2, [pc, #340]	; (8001dc0 <LL_SetFlashLatency+0x19c>)
 8001c6a:	4290      	cmp	r0, r2
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001c72:	d943      	bls.n	8001cfc <LL_SetFlashLatency+0xd8>
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001c74:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c78:	f040 808c 	bne.w	8001d94 <LL_SetFlashLatency+0x170>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	4a4c      	ldr	r2, [pc, #304]	; (8001db0 <LL_SetFlashLatency+0x18c>)
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001c86:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001c8a:	d140      	bne.n	8001d0e <LL_SetFlashLatency+0xea>
    {
#if defined (UTILS_SCALE3_LATENCY3_FREQ)
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	; (8001dbc <LL_SetFlashLatency+0x198>)
 8001c8e:	4290      	cmp	r0, r2
 8001c90:	d964      	bls.n	8001d5c <LL_SetFlashLatency+0x138>
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	bf38      	it	cc
 8001c96:	2301      	movcc	r3, #1
 8001c98:	e039      	b.n	8001d0e <LL_SetFlashLatency+0xea>
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001ca0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ca4:	d166      	bne.n	8001d74 <LL_SetFlashLatency+0x150>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	e00e      	b.n	8001cc8 <LL_SetFlashLatency+0xa4>
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001cb0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cb4:	d166      	bne.n	8001d84 <LL_SetFlashLatency+0x160>
 8001cb6:	2303      	movs	r3, #3
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001cb8:	e006      	b.n	8001cc8 <LL_SetFlashLatency+0xa4>
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001cc0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cc4:	d14e      	bne.n	8001d64 <LL_SetFlashLatency+0x140>
        latency = LL_FLASH_LATENCY_2;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	4a39      	ldr	r2, [pc, #228]	; (8001db0 <LL_SetFlashLatency+0x18c>)
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001cd0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001cd4:	d11b      	bne.n	8001d0e <LL_SetFlashLatency+0xea>
 8001cd6:	e7dc      	b.n	8001c92 <LL_SetFlashLatency+0x6e>
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001cde:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ce2:	d12e      	bne.n	8001d42 <LL_SetFlashLatency+0x11e>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001ce4:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
 8001ce8:	f502 42a3 	add.w	r2, r2, #20864	; 0x5180
 8001cec:	4290      	cmp	r0, r2
 8001cee:	d8aa      	bhi.n	8001c46 <LL_SetFlashLatency+0x22>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001cf0:	4a34      	ldr	r2, [pc, #208]	; (8001dc4 <LL_SetFlashLatency+0x1a0>)
 8001cf2:	4290      	cmp	r0, r2
 8001cf4:	d81d      	bhi.n	8001d32 <LL_SetFlashLatency+0x10e>
 8001cf6:	681b      	ldr	r3, [r3, #0]
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e008      	b.n	8001d0e <LL_SetFlashLatency+0xea>
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001cfc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d00:	d1f9      	bne.n	8001cf6 <LL_SetFlashLatency+0xd2>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d02:	4a30      	ldr	r2, [pc, #192]	; (8001dc4 <LL_SetFlashLatency+0x1a0>)
 8001d04:	4290      	cmp	r0, r2
 8001d06:	d9f6      	bls.n	8001cf6 <LL_SetFlashLatency+0xd2>
 8001d08:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <LL_SetFlashLatency+0x18c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
        latency = LL_FLASH_LATENCY_4;
 8001d0c:	2304      	movs	r3, #4
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001d0e:	492e      	ldr	r1, [pc, #184]	; (8001dc8 <LL_SetFlashLatency+0x1a4>)
 8001d10:	680a      	ldr	r2, [r1, #0]
 8001d12:	f022 020f 	bic.w	r2, r2, #15
 8001d16:	431a      	orrs	r2, r3
 8001d18:	600a      	str	r2, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001d1a:	680a      	ldr	r2, [r1, #0]
 8001d1c:	f002 020f 	and.w	r2, r2, #15
    do
    {
    /* Wait for Flash latency to be updated */
    getlatency = LL_FLASH_GetLatency();
    timeout--;
    } while ((getlatency != latency) && (timeout > 0));
 8001d20:	4293      	cmp	r3, r2
 8001d22:	bf1c      	itt	ne
 8001d24:	680a      	ldrne	r2, [r1, #0]
 8001d26:	f002 020f 	andne.w	r2, r2, #15

    if(getlatency != latency)
 8001d2a:	1a98      	subs	r0, r3, r2
 8001d2c:	bf18      	it	ne
 8001d2e:	2001      	movne	r0, #1
 8001d30:	4770      	bx	lr
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d32:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <LL_SetFlashLatency+0x198>)
 8001d34:	4290      	cmp	r0, r2
 8001d36:	d81d      	bhi.n	8001d74 <LL_SetFlashLatency+0x150>
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <LL_SetFlashLatency+0x19c>)
 8001d3a:	4298      	cmp	r0, r3
 8001d3c:	d9e4      	bls.n	8001d08 <LL_SetFlashLatency+0xe4>
        latency = LL_FLASH_LATENCY_4;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	e79d      	b.n	8001c7e <LL_SetFlashLatency+0x5a>
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001d48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d4c:	d1d4      	bne.n	8001cf8 <LL_SetFlashLatency+0xd4>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <LL_SetFlashLatency+0x194>)
 8001d50:	4298      	cmp	r0, r3
 8001d52:	d827      	bhi.n	8001da4 <LL_SetFlashLatency+0x180>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <LL_SetFlashLatency+0x198>)
 8001d56:	4298      	cmp	r0, r3
 8001d58:	d826      	bhi.n	8001da8 <LL_SetFlashLatency+0x184>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001d5a:	2300      	movs	r3, #0
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d5c:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <LL_SetFlashLatency+0x19c>)
 8001d5e:	4290      	cmp	r0, r2
 8001d60:	d9d5      	bls.n	8001d0e <LL_SetFlashLatency+0xea>
 8001d62:	e796      	b.n	8001c92 <LL_SetFlashLatency+0x6e>
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        latency = LL_FLASH_LATENCY_2;
 8001d6e:	f04f 0302 	mov.w	r3, #2
 8001d72:	e7af      	b.n	8001cd4 <LL_SetFlashLatency+0xb0>
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d7e:	f04f 0304 	mov.w	r3, #4
 8001d82:	e7a7      	b.n	8001cd4 <LL_SetFlashLatency+0xb0>
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d8e:	f04f 0303 	mov.w	r3, #3
 8001d92:	e79f      	b.n	8001cd4 <LL_SetFlashLatency+0xb0>
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d9e:	f04f 0301 	mov.w	r3, #1
 8001da2:	e797      	b.n	8001cd4 <LL_SetFlashLatency+0xb0>
        latency = LL_FLASH_LATENCY_3;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e774      	b.n	8001c92 <LL_SetFlashLatency+0x6e>
        latency = LL_FLASH_LATENCY_2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	e7b0      	b.n	8001d0e <LL_SetFlashLatency+0xea>
    status = ERROR;
 8001dac:	2001      	movs	r0, #1
    {
      status = SUCCESS;
    }
  }
  return status;
}
 8001dae:	4770      	bx	lr
 8001db0:	40007000 	.word	0x40007000
 8001db4:	07270e00 	.word	0x07270e00
 8001db8:	055d4a80 	.word	0x055d4a80
 8001dbc:	03938700 	.word	0x03938700
 8001dc0:	01c9c380 	.word	0x01c9c380
 8001dc4:	00b71b00 	.word	0x00b71b00
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <z_sys_init_run_level+0x3c>)
{
 8001dce:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001dd0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8001dd4:	3001      	adds	r0, #1
 8001dd6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8001dda:	42a6      	cmp	r6, r4
 8001ddc:	d800      	bhi.n	8001de0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8001dde:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8001de0:	e9d4 3500 	ldrd	r3, r5, [r4]
 8001de4:	4628      	mov	r0, r5
 8001de6:	4798      	blx	r3
		if (dev != NULL) {
 8001de8:	b165      	cbz	r5, 8001e04 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 8001dea:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 8001dec:	b130      	cbz	r0, 8001dfc <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8001dee:	2800      	cmp	r0, #0
 8001df0:	bfb8      	it	lt
 8001df2:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
 8001df4:	28ff      	cmp	r0, #255	; 0xff
 8001df6:	bfa8      	it	ge
 8001df8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 8001dfa:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8001dfc:	785a      	ldrb	r2, [r3, #1]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001e04:	3408      	adds	r4, #8
 8001e06:	e7e8      	b.n	8001dda <z_sys_init_run_level+0xe>
 8001e08:	08003918 	.word	0x08003918

08001e0c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8001e0c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <bg_thread_main+0x2c>)
 8001e10:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001e12:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8001e14:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001e16:	f7ff ffd9 	bl	8001dcc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8001e1a:	f000 fd67 	bl	80028ec <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f7ff ffd4 	bl	8001dcc <z_sys_init_run_level>

	z_init_static_threads();
 8001e24:	f000 f8f4 	bl	8002010 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 8001e28:	f7fe fb2a 	bl	8000480 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8001e2c:	4a03      	ldr	r2, [pc, #12]	; (8001e3c <bg_thread_main+0x30>)
 8001e2e:	7b13      	ldrb	r3, [r2, #12]
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8001e36:	bd08      	pop	{r3, pc}
 8001e38:	20000335 	.word	0x20000335
 8001e3c:	200000f0 	.word	0x200000f0

08001e40 <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8001e40:	4806      	ldr	r0, [pc, #24]	; (8001e5c <z_bss_zero+0x1c>)
 8001e42:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <z_bss_zero+0x20>)
{
 8001e44:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8001e46:	1a12      	subs	r2, r2, r0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	f001 f936 	bl	80030ba <z_early_memset>
		       - (uintptr_t) &__ccm_bss_start);
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <z_bss_zero+0x24>)
	z_early_memset(&__ccm_bss_start, 0,
 8001e50:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <z_bss_zero+0x28>)
 8001e52:	2100      	movs	r1, #0
 8001e54:	1a12      	subs	r2, r2, r0
 8001e56:	f001 f930 	bl	80030ba <z_early_memset>
}
 8001e5a:	bd08      	pop	{r3, pc}
 8001e5c:	20000070 	.word	0x20000070
 8001e60:	20000338 	.word	0x20000338
 8001e64:	10000000 	.word	0x10000000
 8001e68:	10000000 	.word	0x10000000

08001e6c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8001e6c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 8001e6e:	2300      	movs	r3, #0
{
 8001e70:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 8001e72:	2201      	movs	r2, #1
 8001e74:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 8001e78:	4e13      	ldr	r6, [pc, #76]	; (8001ec8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001e7a:	4d14      	ldr	r5, [pc, #80]	; (8001ecc <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	220f      	movs	r2, #15
 8001e80:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8001e84:	4912      	ldr	r1, [pc, #72]	; (8001ed0 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001e86:	2318      	movs	r3, #24
 8001e88:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 8001e8c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 8001e90:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8001e92:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8001e96:	fb00 1104 	mla	r1, r0, r4, r1
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <z_init_cpu+0x68>)
 8001e9c:	9500      	str	r5, [sp, #0]
 8001e9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ea2:	4630      	mov	r0, r6
 8001ea4:	f000 f882 	bl	8001fac <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8001ea8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8001eac:	60ee      	str	r6, [r5, #12]
 8001eae:	f023 0304 	bic.w	r3, r3, #4
 8001eb2:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8001eb4:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8001eb8:	fb04 3303 	mla	r3, r4, r3, r3
 8001ebc:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
 8001ebe:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
 8001ec0:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 8001ec2:	b006      	add	sp, #24
 8001ec4:	bd70      	pop	{r4, r5, r6, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000070 	.word	0x20000070
 8001ecc:	20000300 	.word	0x20000300
 8001ed0:	20000b80 	.word	0x20000b80
 8001ed4:	080030c3 	.word	0x080030c3
 8001ed8:	20000340 	.word	0x20000340

08001edc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8001edc:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8001ede:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <z_cstart+0xb4>)
 8001ee0:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001ee2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8001ee6:	4d2b      	ldr	r5, [pc, #172]	; (8001f94 <z_cstart+0xb8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 8001ee8:	4e2b      	ldr	r6, [pc, #172]	; (8001f98 <z_cstart+0xbc>)
 8001eea:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001eec:	4f2b      	ldr	r7, [pc, #172]	; (8001f9c <z_cstart+0xc0>)
 8001eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef2:	2400      	movs	r4, #0
 8001ef4:	616b      	str	r3, [r5, #20]
 8001ef6:	23f0      	movs	r3, #240	; 0xf0
 8001ef8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8001efc:	77ec      	strb	r4, [r5, #31]
 8001efe:	762c      	strb	r4, [r5, #24]
 8001f00:	766c      	strb	r4, [r5, #25]
 8001f02:	76ac      	strb	r4, [r5, #26]
 8001f04:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8001f08:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001f0a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001f0e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8001f10:	f7ff f8fe 	bl	8001110 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8001f14:	f7fe fefa 	bl	8000d0c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f1c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8001f1e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8001f20:	f7ff f9d8 	bl	80012d4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8001f24:	f7ff f93e 	bl	80011a4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8001f28:	f240 1301 	movw	r3, #257	; 0x101
 8001f2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8001f30:	ab06      	add	r3, sp, #24
 8001f32:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 8001f34:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
 8001f38:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8001f3a:	f001 f88c 	bl	8003056 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7ff ff44 	bl	8001dcc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8001f44:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 8001f46:	4d16      	ldr	r5, [pc, #88]	; (8001fa0 <z_cstart+0xc4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8001f48:	f7ff ff40 	bl	8001dcc <z_sys_init_run_level>
	z_sched_init();
 8001f4c:	f000 fa5e 	bl	800240c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <z_cstart+0xc8>)
	_kernel.ready_q.cache = &z_main_thread;
 8001f52:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001f54:	9305      	str	r3, [sp, #20]
 8001f56:	2301      	movs	r3, #1
 8001f58:	4913      	ldr	r1, [pc, #76]	; (8001fa8 <z_cstart+0xcc>)
 8001f5a:	9400      	str	r4, [sp, #0]
 8001f5c:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8001f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f64:	463b      	mov	r3, r7
 8001f66:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	f000 f81e 	bl	8001fac <z_setup_new_thread>
 8001f70:	7b6a      	ldrb	r2, [r5, #13]
 8001f72:	4606      	mov	r6, r0
 8001f74:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 8001f78:	4628      	mov	r0, r5
 8001f7a:	736a      	strb	r2, [r5, #13]
 8001f7c:	f001 f8e1 	bl	8003142 <z_ready_thread>
	z_init_cpu(0);
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7ff ff73 	bl	8001e6c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8001f86:	463a      	mov	r2, r7
 8001f88:	4631      	mov	r1, r6
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	f7fe ffa6 	bl	8000edc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8001f90:	20000b80 	.word	0x20000b80
 8001f94:	e000ed00 	.word	0xe000ed00
 8001f98:	20000300 	.word	0x20000300
 8001f9c:	08001e0d 	.word	0x08001e0d
 8001fa0:	200000f0 	.word	0x200000f0
 8001fa4:	08003a8d 	.word	0x08003a8d
 8001fa8:	20000d00 	.word	0x20000d00

08001fac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8001fac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8001fb0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8001fb2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8001fb4:	2604      	movs	r6, #4
 8001fb6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8001fb8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8001fba:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8001fbc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 8001fc0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8001fc2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8001fc4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8001fc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8001fca:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8001fcc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8001fd0:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8001fd2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8001fd6:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 8001fda:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8001fdc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8001fde:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8001fe0:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8001fe4:	9202      	str	r2, [sp, #8]
 8001fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001fe8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8001fea:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8001fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001fee:	9200      	str	r2, [sp, #0]
 8001ff0:	4642      	mov	r2, r8
{
 8001ff2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8001ff4:	f7fe ff40 	bl	8000e78 <arch_new_thread>
	if (!_current) {
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 8001ffa:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	b103      	cbz	r3, 8002002 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 8002002:	6723      	str	r3, [r4, #112]	; 0x70
}
 8002004:	4640      	mov	r0, r8
 8002006:	b004      	add	sp, #16
 8002008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800200c:	20000300 	.word	0x20000300

08002010 <z_init_static_threads>:
{
 8002010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002012:	4c22      	ldr	r4, [pc, #136]	; (800209c <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8002014:	4d22      	ldr	r5, [pc, #136]	; (80020a0 <z_init_static_threads+0x90>)
{
 8002016:	b087      	sub	sp, #28
 8002018:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800201a:	42ae      	cmp	r6, r5
 800201c:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8002020:	d30b      	bcc.n	800203a <z_init_static_threads+0x2a>
	k_sched_lock();
 8002022:	f000 f9c3 	bl	80023ac <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002026:	4c1d      	ldr	r4, [pc, #116]	; (800209c <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8002028:	4f1e      	ldr	r7, [pc, #120]	; (80020a4 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 800202a:	260a      	movs	r6, #10
 800202c:	42ac      	cmp	r4, r5
 800202e:	d320      	bcc.n	8002072 <z_init_static_threads+0x62>
}
 8002030:	b007      	add	sp, #28
 8002032:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8002036:	f000 b9cd 	b.w	80023d4 <k_sched_unlock>
		z_setup_new_thread(
 800203a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800203e:	9305      	str	r3, [sp, #20]
 8002040:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002044:	9304      	str	r3, [sp, #16]
 8002046:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800204a:	9303      	str	r3, [sp, #12]
 800204c:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8002050:	9302      	str	r3, [sp, #8]
 8002052:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8002062:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8002066:	f7ff ffa1 	bl	8001fac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800206a:	f854 3c30 	ldr.w	r3, [r4, #-48]
 800206e:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8002070:	e7d2      	b.n	8002018 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002072:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002074:	1c53      	adds	r3, r2, #1
 8002076:	d009      	beq.n	800208c <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 8002078:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800207c:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002080:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8002084:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002086:	d103      	bne.n	8002090 <z_init_static_threads+0x80>
	z_sched_start(thread);
 8002088:	f000 f940 	bl	800230c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800208c:	3430      	adds	r4, #48	; 0x30
 800208e:	e7cd      	b.n	800202c <z_init_static_threads+0x1c>
 8002090:	4639      	mov	r1, r7
 8002092:	3018      	adds	r0, #24
 8002094:	f000 fb38 	bl	8002708 <z_add_timeout>
 8002098:	e7f8      	b.n	800208c <z_init_static_threads+0x7c>
 800209a:	bf00      	nop
 800209c:	20000070 	.word	0x20000070
 80020a0:	20000070 	.word	0x20000070
 80020a4:	080030ff 	.word	0x080030ff

080020a8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 80020a8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 80020aa:	4d07      	ldr	r5, [pc, #28]	; (80020c8 <z_reset_time_slice+0x20>)
 80020ac:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 80020ae:	b154      	cbz	r4, 80020c6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 80020b0:	f7ff fd26 	bl	8001b00 <sys_clock_elapsed>
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <z_reset_time_slice+0x24>)
 80020b6:	4404      	add	r4, r0
 80020b8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 80020ba:	6828      	ldr	r0, [r5, #0]
 80020bc:	2100      	movs	r1, #0
	}
}
 80020be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 80020c2:	f001 b87a 	b.w	80031ba <z_set_timeout_expiry>
}
 80020c6:	bd38      	pop	{r3, r4, r5, pc}
 80020c8:	2000032c 	.word	0x2000032c
 80020cc:	20000300 	.word	0x20000300

080020d0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 80020d0:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 80020d2:	4d0d      	ldr	r5, [pc, #52]	; (8002108 <update_cache+0x38>)
 80020d4:	462b      	mov	r3, r5
 80020d6:	f853 4f1c 	ldr.w	r4, [r3, #28]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80020da:	429c      	cmp	r4, r3
 80020dc:	d000      	beq.n	80020e0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80020de:	b904      	cbnz	r4, 80020e2 <update_cache+0x12>
 80020e0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 80020e2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 80020e4:	b938      	cbnz	r0, 80020f6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 80020e6:	7b5a      	ldrb	r2, [r3, #13]
 80020e8:	06d2      	lsls	r2, r2, #27
 80020ea:	d104      	bne.n	80020f6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80020ec:	69a2      	ldr	r2, [r4, #24]
 80020ee:	b912      	cbnz	r2, 80020f6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 80020f0:	89da      	ldrh	r2, [r3, #14]
 80020f2:	2a7f      	cmp	r2, #127	; 0x7f
 80020f4:	d805      	bhi.n	8002102 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 80020f6:	429c      	cmp	r4, r3
 80020f8:	d002      	beq.n	8002100 <update_cache+0x30>
			z_reset_time_slice(thread);
 80020fa:	4620      	mov	r0, r4
 80020fc:	f7ff ffd4 	bl	80020a8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 8002100:	4623      	mov	r3, r4
 8002102:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 8002104:	bd38      	pop	{r3, r4, r5, pc}
 8002106:	bf00      	nop
 8002108:	20000300 	.word	0x20000300

0800210c <move_thread_to_end_of_prio_q>:
{
 800210c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800210e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8002112:	7b43      	ldrb	r3, [r0, #13]
 8002114:	2a00      	cmp	r2, #0
{
 8002116:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8002118:	da04      	bge.n	8002124 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800211a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800211e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8002120:	f000 ffdb 	bl	80030da <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8002124:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 8002126:	4a15      	ldr	r2, [pc, #84]	; (800217c <move_thread_to_end_of_prio_q+0x70>)
 8002128:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800212c:	4610      	mov	r0, r2
 800212e:	734b      	strb	r3, [r1, #13]
 8002130:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8002134:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002136:	4283      	cmp	r3, r0
 8002138:	bf08      	it	eq
 800213a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800213c:	b923      	cbnz	r3, 8002148 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 800213e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 8002142:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8002144:	6211      	str	r1, [r2, #32]
}
 8002146:	e00c      	b.n	8002162 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 8002148:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 800214c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8002150:	42b5      	cmp	r5, r6
 8002152:	d00e      	beq.n	8002172 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002154:	42ae      	cmp	r6, r5
 8002156:	dd0c      	ble.n	8002172 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8002158:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 800215a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 800215e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8002160:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8002162:	6890      	ldr	r0, [r2, #8]
 8002164:	1a43      	subs	r3, r0, r1
 8002166:	4258      	negs	r0, r3
}
 8002168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 800216c:	4158      	adcs	r0, r3
 800216e:	f7ff bfaf 	b.w	80020d0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8002172:	429c      	cmp	r4, r3
 8002174:	d0e3      	beq.n	800213e <move_thread_to_end_of_prio_q+0x32>
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	e7e0      	b.n	800213c <move_thread_to_end_of_prio_q+0x30>
 800217a:	bf00      	nop
 800217c:	20000300 	.word	0x20000300

08002180 <ready_thread>:
{
 8002180:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8002182:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8002186:	7b42      	ldrb	r2, [r0, #13]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db29      	blt.n	80021e0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800218c:	06d3      	lsls	r3, r2, #27
 800218e:	d127      	bne.n	80021e0 <ready_thread+0x60>
	return node->next != NULL;
 8002190:	6983      	ldr	r3, [r0, #24]
 8002192:	bb2b      	cbnz	r3, 80021e0 <ready_thread+0x60>
	return list->head == list;
 8002194:	4913      	ldr	r1, [pc, #76]	; (80021e4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8002196:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800219a:	7342      	strb	r2, [r0, #13]
 800219c:	460a      	mov	r2, r1
 800219e:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80021a2:	4294      	cmp	r4, r2
 80021a4:	bf18      	it	ne
 80021a6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 80021a8:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80021aa:	b923      	cbnz	r3, 80021b6 <ready_thread+0x36>
	node->prev = tail;
 80021ac:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 80021b0:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80021b2:	6208      	str	r0, [r1, #32]
}
 80021b4:	e00c      	b.n	80021d0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 80021b6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 80021ba:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 80021be:	42b5      	cmp	r5, r6
 80021c0:	d00a      	beq.n	80021d8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80021c2:	42ae      	cmp	r6, r5
 80021c4:	dd08      	ble.n	80021d8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 80021c6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80021c8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 80021cc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80021ce:	6058      	str	r0, [r3, #4]
}
 80021d0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7ff bf7c 	b.w	80020d0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80021d8:	42a3      	cmp	r3, r4
 80021da:	d0e7      	beq.n	80021ac <ready_thread+0x2c>
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	e7e4      	b.n	80021aa <ready_thread+0x2a>
}
 80021e0:	bc70      	pop	{r4, r5, r6}
 80021e2:	4770      	bx	lr
 80021e4:	20000300 	.word	0x20000300

080021e8 <unready_thread>:
{
 80021e8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 80021ea:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80021ee:	7b43      	ldrb	r3, [r0, #13]
 80021f0:	2a00      	cmp	r2, #0
{
 80021f2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80021f4:	da04      	bge.n	8002200 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80021f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021fa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80021fc:	f000 ff6d 	bl	80030da <sys_dlist_remove>
	update_cache(thread == _current);
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <unready_thread+0x2c>)
 8002202:	6898      	ldr	r0, [r3, #8]
 8002204:	1a43      	subs	r3, r0, r1
 8002206:	4258      	negs	r0, r3
 8002208:	4158      	adcs	r0, r3
}
 800220a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800220e:	f7ff bf5f 	b.w	80020d0 <update_cache>
 8002212:	bf00      	nop
 8002214:	20000300 	.word	0x20000300

08002218 <k_sched_time_slice_set>:
{
 8002218:	b510      	push	{r4, lr}
	__asm__ volatile(
 800221a:	f04f 0310 	mov.w	r3, #16
 800221e:	f3ef 8411 	mrs	r4, BASEPRI
 8002222:	f383 8812 	msr	BASEPRI_MAX, r3
 8002226:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
 800222a:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800222c:	2800      	cmp	r0, #0
 800222e:	fb00 f303 	mul.w	r3, r0, r3
 8002232:	dd02      	ble.n	800223a <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
 8002234:	2b02      	cmp	r3, #2
 8002236:	bfb8      	it	lt
 8002238:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
 800223a:	4a07      	ldr	r2, [pc, #28]	; (8002258 <k_sched_time_slice_set+0x40>)
 800223c:	2000      	movs	r0, #0
 800223e:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 8002240:	4806      	ldr	r0, [pc, #24]	; (800225c <k_sched_time_slice_set+0x44>)
 8002242:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <k_sched_time_slice_set+0x48>)
		z_reset_time_slice(_current);
 8002246:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 8002248:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 800224a:	f7ff ff2d 	bl	80020a8 <z_reset_time_slice>
	__asm__ volatile(
 800224e:	f384 8811 	msr	BASEPRI, r4
 8002252:	f3bf 8f6f 	isb	sy
}
 8002256:	bd10      	pop	{r4, pc}
 8002258:	20000300 	.word	0x20000300
 800225c:	2000032c 	.word	0x2000032c
 8002260:	20000328 	.word	0x20000328

08002264 <z_time_slice>:
{
 8002264:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8002266:	f04f 0310 	mov.w	r3, #16
 800226a:	f3ef 8511 	mrs	r5, BASEPRI
 800226e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002272:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <z_time_slice+0x70>)
 8002278:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <z_time_slice+0x74>)
 800227a:	689c      	ldr	r4, [r3, #8]
 800227c:	6811      	ldr	r1, [r2, #0]
 800227e:	428c      	cmp	r4, r1
 8002280:	d107      	bne.n	8002292 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 8002282:	4620      	mov	r0, r4
 8002284:	f7ff ff10 	bl	80020a8 <z_reset_time_slice>
	__asm__ volatile(
 8002288:	f385 8811 	msr	BASEPRI, r5
 800228c:	f3bf 8f6f 	isb	sy
}
 8002290:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8002292:	2100      	movs	r1, #0
 8002294:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 8002296:	4a11      	ldr	r2, [pc, #68]	; (80022dc <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	b1c2      	cbz	r2, 80022ce <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 800229c:	89e2      	ldrh	r2, [r4, #14]
 800229e:	2a7f      	cmp	r2, #127	; 0x7f
 80022a0:	d815      	bhi.n	80022ce <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 80022a2:	7b62      	ldrb	r2, [r4, #13]
 80022a4:	06d2      	lsls	r2, r2, #27
 80022a6:	d112      	bne.n	80022ce <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80022a8:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <z_time_slice+0x7c>)
 80022aa:	f994 100e 	ldrsb.w	r1, [r4, #14]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	4291      	cmp	r1, r2
 80022b2:	db0c      	blt.n	80022ce <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 80022b4:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <z_time_slice+0x80>)
 80022b6:	4294      	cmp	r4, r2
 80022b8:	d009      	beq.n	80022ce <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	4282      	cmp	r2, r0
 80022be:	dc03      	bgt.n	80022c8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff ff23 	bl	800210c <move_thread_to_end_of_prio_q>
 80022c6:	e7dc      	b.n	8002282 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 80022c8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 80022ca:	611a      	str	r2, [r3, #16]
 80022cc:	e7dc      	b.n	8002288 <z_time_slice+0x24>
 80022ce:	2200      	movs	r2, #0
 80022d0:	e7fb      	b.n	80022ca <z_time_slice+0x66>
 80022d2:	bf00      	nop
 80022d4:	20000300 	.word	0x20000300
 80022d8:	20000324 	.word	0x20000324
 80022dc:	2000032c 	.word	0x2000032c
 80022e0:	20000328 	.word	0x20000328
 80022e4:	20000070 	.word	0x20000070

080022e8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80022e8:	b949      	cbnz	r1, 80022fe <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022ea:	f3ef 8005 	mrs	r0, IPSR
 80022ee:	b930      	cbnz	r0, 80022fe <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 80022f2:	699a      	ldr	r2, [r3, #24]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d001      	beq.n	80022fe <z_reschedule+0x16>
	ret = arch_swap(key);
 80022fa:	f7fe bd69 	b.w	8000dd0 <arch_swap>
 80022fe:	f381 8811 	msr	BASEPRI, r1
 8002302:	f3bf 8f6f 	isb	sy
}
 8002306:	4770      	bx	lr
 8002308:	20000300 	.word	0x20000300

0800230c <z_sched_start>:
{
 800230c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800230e:	f04f 0210 	mov.w	r2, #16
 8002312:	f3ef 8411 	mrs	r4, BASEPRI
 8002316:	f382 8812 	msr	BASEPRI_MAX, r2
 800231a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800231e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8002320:	0751      	lsls	r1, r2, #29
 8002322:	d404      	bmi.n	800232e <z_sched_start+0x22>
	__asm__ volatile(
 8002324:	f384 8811 	msr	BASEPRI, r4
 8002328:	f3bf 8f6f 	isb	sy
}
 800232c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8002334:	f7ff ff24 	bl	8002180 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8002338:	4621      	mov	r1, r4
 800233a:	4802      	ldr	r0, [pc, #8]	; (8002344 <z_sched_start+0x38>)
}
 800233c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8002340:	f7ff bfd2 	b.w	80022e8 <z_reschedule>
 8002344:	20000336 	.word	0x20000336

08002348 <z_impl_k_thread_suspend>:
{
 8002348:	b570      	push	{r4, r5, r6, lr}
 800234a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800234c:	3018      	adds	r0, #24
 800234e:	f000 ff1e 	bl	800318e <z_abort_timeout>
	__asm__ volatile(
 8002352:	f04f 0310 	mov.w	r3, #16
 8002356:	f3ef 8611 	mrs	r6, BASEPRI
 800235a:	f383 8812 	msr	BASEPRI_MAX, r3
 800235e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8002362:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 8002366:	7b63      	ldrb	r3, [r4, #13]
 8002368:	2a00      	cmp	r2, #0
 800236a:	da05      	bge.n	8002378 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800236c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002370:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002372:	4620      	mov	r0, r4
 8002374:	f000 feb1 	bl	80030da <sys_dlist_remove>
		update_cache(thread == _current);
 8002378:	4d0b      	ldr	r5, [pc, #44]	; (80023a8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800237a:	7b63      	ldrb	r3, [r4, #13]
 800237c:	68a8      	ldr	r0, [r5, #8]
 800237e:	f043 0310 	orr.w	r3, r3, #16
 8002382:	7363      	strb	r3, [r4, #13]
 8002384:	1b03      	subs	r3, r0, r4
 8002386:	4258      	negs	r0, r3
 8002388:	4158      	adcs	r0, r3
 800238a:	f7ff fea1 	bl	80020d0 <update_cache>
	__asm__ volatile(
 800238e:	f386 8811 	msr	BASEPRI, r6
 8002392:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8002396:	68ab      	ldr	r3, [r5, #8]
 8002398:	42a3      	cmp	r3, r4
 800239a:	d103      	bne.n	80023a4 <z_impl_k_thread_suspend+0x5c>
}
 800239c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 80023a0:	f000 beeb 	b.w	800317a <z_reschedule_unlocked>
}
 80023a4:	bd70      	pop	{r4, r5, r6, pc}
 80023a6:	bf00      	nop
 80023a8:	20000300 	.word	0x20000300

080023ac <k_sched_lock>:
	__asm__ volatile(
 80023ac:	f04f 0310 	mov.w	r3, #16
 80023b0:	f3ef 8111 	mrs	r1, BASEPRI
 80023b4:	f383 8812 	msr	BASEPRI_MAX, r3
 80023b8:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <k_sched_lock+0x24>)
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	7bd3      	ldrb	r3, [r2, #15]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80023c6:	f381 8811 	msr	BASEPRI, r1
 80023ca:	f3bf 8f6f 	isb	sy
}
 80023ce:	4770      	bx	lr
 80023d0:	20000300 	.word	0x20000300

080023d4 <k_sched_unlock>:
{
 80023d4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80023d6:	f04f 0310 	mov.w	r3, #16
 80023da:	f3ef 8411 	mrs	r4, BASEPRI
 80023de:	f383 8812 	msr	BASEPRI_MAX, r3
 80023e2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <k_sched_unlock+0x34>)
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	7bd3      	ldrb	r3, [r2, #15]
 80023ec:	3301      	adds	r3, #1
 80023ee:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7ff fe6d 	bl	80020d0 <update_cache>
	__asm__ volatile(
 80023f6:	f384 8811 	msr	BASEPRI, r4
 80023fa:	f3bf 8f6f 	isb	sy
}
 80023fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8002402:	f000 beba 	b.w	800317a <z_reschedule_unlocked>
 8002406:	bf00      	nop
 8002408:	20000300 	.word	0x20000300

0800240c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800240e:	2100      	movs	r1, #0
 8002410:	f103 021c 	add.w	r2, r3, #28
 8002414:	4608      	mov	r0, r1
	list->tail = (sys_dnode_t *)list;
 8002416:	e9c3 2207 	strd	r2, r2, [r3, #28]
 800241a:	f7ff befd 	b.w	8002218 <k_sched_time_slice_set>
 800241e:	bf00      	nop
 8002420:	20000300 	.word	0x20000300

08002424 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 8002424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8002426:	f04f 0310 	mov.w	r3, #16
 800242a:	f3ef 8511 	mrs	r5, BASEPRI
 800242e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002432:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 8002436:	4919      	ldr	r1, [pc, #100]	; (800249c <z_impl_k_yield+0x78>)
 8002438:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800243a:	7b43      	ldrb	r3, [r0, #13]
 800243c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002440:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002442:	f000 fe4a 	bl	80030da <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8002446:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 8002448:	460a      	mov	r2, r1
 800244a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800244e:	7343      	strb	r3, [r0, #13]
 8002450:	f852 3f1c 	ldr.w	r3, [r2, #28]!
	return (node == list->tail) ? NULL : node->next;
 8002454:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002456:	4293      	cmp	r3, r2
 8002458:	bf08      	it	eq
 800245a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800245c:	b923      	cbnz	r3, 8002468 <z_impl_k_yield+0x44>
	node->prev = tail;
 800245e:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 8002462:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8002464:	6208      	str	r0, [r1, #32]
}
 8002466:	e00c      	b.n	8002482 <z_impl_k_yield+0x5e>
	int32_t b1 = thread_1->base.prio;
 8002468:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800246c:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
 8002470:	42be      	cmp	r6, r7
 8002472:	d00e      	beq.n	8002492 <z_impl_k_yield+0x6e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002474:	42b7      	cmp	r7, r6
 8002476:	dd0c      	ble.n	8002492 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
 8002478:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800247a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800247e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8002480:	6058      	str	r0, [r3, #4]
	}
	queue_thread(_current);
	update_cache(1);
 8002482:	2001      	movs	r0, #1
 8002484:	f7ff fe24 	bl	80020d0 <update_cache>
 8002488:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 800248a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800248e:	f7fe bc9f 	b.w	8000dd0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8002492:	42a3      	cmp	r3, r4
 8002494:	d0e3      	beq.n	800245e <z_impl_k_yield+0x3a>
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	e7e0      	b.n	800245c <z_impl_k_yield+0x38>
 800249a:	bf00      	nop
 800249c:	20000300 	.word	0x20000300

080024a0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 80024a0:	ea50 0301 	orrs.w	r3, r0, r1
{
 80024a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024a8:	4605      	mov	r5, r0
 80024aa:	460e      	mov	r6, r1
	if (ticks == 0) {
 80024ac:	d103      	bne.n	80024b6 <z_tick_sleep+0x16>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
 80024ae:	f7ff ffb9 	bl	8002424 <z_impl_k_yield>
		k_yield();
		return 0;
 80024b2:	2000      	movs	r0, #0
 80024b4:	e02c      	b.n	8002510 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 80024b6:	1c83      	adds	r3, r0, #2
 80024b8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
 80024bc:	db2a      	blt.n	8002514 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 80024be:	f000 fe98 	bl	80031f2 <sys_clock_tick_get_32>
 80024c2:	1944      	adds	r4, r0, r5
 80024c4:	f04f 0310 	mov.w	r3, #16
 80024c8:	f3ef 8811 	mrs	r8, BASEPRI
 80024cc:	f383 8812 	msr	BASEPRI_MAX, r3
 80024d0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 80024d4:	4f11      	ldr	r7, [pc, #68]	; (800251c <z_tick_sleep+0x7c>)
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <z_tick_sleep+0x80>)
 80024d8:	68b8      	ldr	r0, [r7, #8]
 80024da:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 80024dc:	f7ff fe84 	bl	80021e8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80024e0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80024e2:	4910      	ldr	r1, [pc, #64]	; (8002524 <z_tick_sleep+0x84>)
 80024e4:	462a      	mov	r2, r5
 80024e6:	4633      	mov	r3, r6
 80024e8:	3018      	adds	r0, #24
 80024ea:	f000 f90d 	bl	8002708 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 80024ee:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80024f0:	7b53      	ldrb	r3, [r2, #13]
 80024f2:	f043 0310 	orr.w	r3, r3, #16
 80024f6:	7353      	strb	r3, [r2, #13]
 80024f8:	4640      	mov	r0, r8
 80024fa:	f7fe fc69 	bl	8000dd0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 80024fe:	f000 fe78 	bl	80031f2 <sys_clock_tick_get_32>
 8002502:	1a20      	subs	r0, r4, r0
 8002504:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8002508:	2801      	cmp	r0, #1
 800250a:	f173 0300 	sbcs.w	r3, r3, #0
 800250e:	dbd0      	blt.n	80024b2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8002514:	f06f 0401 	mvn.w	r4, #1
 8002518:	1a24      	subs	r4, r4, r0
 800251a:	e7d3      	b.n	80024c4 <z_tick_sleep+0x24>
 800251c:	20000300 	.word	0x20000300
 8002520:	20000324 	.word	0x20000324
 8002524:	080030ff 	.word	0x080030ff

08002528 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002528:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800252c:	bf08      	it	eq
 800252e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8002532:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002534:	d106      	bne.n	8002544 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8002536:	4b07      	ldr	r3, [pc, #28]	; (8002554 <z_impl_k_sleep+0x2c>)
 8002538:	6898      	ldr	r0, [r3, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
 800253a:	f7ff ff05 	bl	8002348 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 800253e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8002542:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8002544:	f7ff ffac 	bl	80024a0 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8002548:	220a      	movs	r2, #10
 800254a:	2300      	movs	r3, #0
 800254c:	17c1      	asrs	r1, r0, #31
 800254e:	f7fd fe2d 	bl	80001ac <__aeabi_uldivmod>
	return ret;
 8002552:	e7f6      	b.n	8002542 <z_impl_k_sleep+0x1a>
 8002554:	20000300 	.word	0x20000300

08002558 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8002558:	4b01      	ldr	r3, [pc, #4]	; (8002560 <z_impl_z_current_get+0x8>)
 800255a:	6898      	ldr	r0, [r3, #8]
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000300 	.word	0x20000300

08002564 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8002564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002568:	4604      	mov	r4, r0
 800256a:	f04f 0310 	mov.w	r3, #16
 800256e:	f3ef 8611 	mrs	r6, BASEPRI
 8002572:	f383 8812 	msr	BASEPRI_MAX, r3
 8002576:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 800257a:	7b03      	ldrb	r3, [r0, #12]
 800257c:	07d9      	lsls	r1, r3, #31
 800257e:	d50b      	bpl.n	8002598 <z_thread_abort+0x34>
	__asm__ volatile(
 8002580:	f386 8811 	msr	BASEPRI, r6
 8002584:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 8002588:	4040      	eors	r0, r0
 800258a:	f380 8811 	msr	BASEPRI, r0
 800258e:	f04f 0004 	mov.w	r0, #4
 8002592:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8002594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8002598:	7b43      	ldrb	r3, [r0, #13]
 800259a:	071a      	lsls	r2, r3, #28
 800259c:	d504      	bpl.n	80025a8 <z_thread_abort+0x44>
 800259e:	f386 8811 	msr	BASEPRI, r6
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	e7f5      	b.n	8002594 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80025a8:	f023 0220 	bic.w	r2, r3, #32
 80025ac:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 80025b0:	09d2      	lsrs	r2, r2, #7
 80025b2:	d120      	bne.n	80025f6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80025b4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 80025b6:	68a3      	ldr	r3, [r4, #8]
 80025b8:	b113      	cbz	r3, 80025c0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 80025ba:	4620      	mov	r0, r4
 80025bc:	f000 fd95 	bl	80030ea <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 80025c0:	f104 0018 	add.w	r0, r4, #24
 80025c4:	f000 fde3 	bl	800318e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80025c8:	f104 0758 	add.w	r7, r4, #88	; 0x58
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80025cc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 80025d0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80025d2:	42bd      	cmp	r5, r7
 80025d4:	d000      	beq.n	80025d8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80025d6:	b9b5      	cbnz	r5, 8002606 <z_thread_abort+0xa2>
		update_cache(1);
 80025d8:	2001      	movs	r0, #1
 80025da:	f7ff fd79 	bl	80020d0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <z_thread_abort+0xbc>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	42a3      	cmp	r3, r4
 80025e4:	d1db      	bne.n	800259e <z_thread_abort+0x3a>
 80025e6:	f3ef 8305 	mrs	r3, IPSR
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1d7      	bne.n	800259e <z_thread_abort+0x3a>
 80025ee:	4630      	mov	r0, r6
 80025f0:	f7fe fbee 	bl	8000dd0 <arch_swap>
	return ret;
 80025f4:	e7d3      	b.n	800259e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80025f6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 80025fa:	f043 0308 	orr.w	r3, r3, #8
 80025fe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002600:	f000 fd6b 	bl	80030da <sys_dlist_remove>
}
 8002604:	e7d7      	b.n	80025b6 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 8002606:	4628      	mov	r0, r5
 8002608:	f000 fd6f 	bl	80030ea <unpend_thread_no_timeout>
 800260c:	f105 0018 	add.w	r0, r5, #24
 8002610:	f000 fdbd 	bl	800318e <z_abort_timeout>
 8002614:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 8002618:	4628      	mov	r0, r5
 800261a:	f7ff fdb1 	bl	8002180 <ready_thread>
 800261e:	e7d7      	b.n	80025d0 <z_thread_abort+0x6c>
 8002620:	20000300 	.word	0x20000300

08002624 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8002624:	4809      	ldr	r0, [pc, #36]	; (800264c <z_data_copy+0x28>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8002626:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <z_data_copy+0x2c>)
 8002628:	490a      	ldr	r1, [pc, #40]	; (8002654 <z_data_copy+0x30>)
{
 800262a:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 800262c:	1a12      	subs	r2, r2, r0
 800262e:	f000 fd46 	bl	80030be <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <z_data_copy+0x34>)
 8002634:	4909      	ldr	r1, [pc, #36]	; (800265c <z_data_copy+0x38>)
 8002636:	480a      	ldr	r0, [pc, #40]	; (8002660 <z_data_copy+0x3c>)
 8002638:	f000 fd41 	bl	80030be <z_early_memcpy>
		       (uintptr_t) &__ramfunc_size);
#endif /* CONFIG_ARCH_HAS_RAMFUNC_SUPPORT */
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_ccm), okay)
	z_early_memcpy(&__ccm_data_start, &__ccm_data_rom_start,
		       __ccm_data_end - __ccm_data_start);
 800263c:	4809      	ldr	r0, [pc, #36]	; (8002664 <z_data_copy+0x40>)
	z_early_memcpy(&__ccm_data_start, &__ccm_data_rom_start,
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <z_data_copy+0x44>)
 8002640:	490a      	ldr	r1, [pc, #40]	; (800266c <z_data_copy+0x48>)
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8002642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ccm_data_start, &__ccm_data_rom_start,
 8002646:	1a12      	subs	r2, r2, r0
 8002648:	f000 bd39 	b.w	80030be <z_early_memcpy>
 800264c:	20000000 	.word	0x20000000
 8002650:	20000070 	.word	0x20000070
 8002654:	08003ac8 	.word	0x08003ac8
 8002658:	00000000 	.word	0x00000000
 800265c:	08003ac8 	.word	0x08003ac8
 8002660:	20000000 	.word	0x20000000
 8002664:	10000000 	.word	0x10000000
 8002668:	10000000 	.word	0x10000000
 800266c:	08003b38 	.word	0x08003b38

08002670 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <elapsed+0x10>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	b90b      	cbnz	r3, 800267a <elapsed+0xa>
 8002676:	f7ff ba43 	b.w	8001b00 <sys_clock_elapsed>
}
 800267a:	2000      	movs	r0, #0
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000330 	.word	0x20000330

08002684 <next_timeout>:
	return list->head == list;
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <next_timeout+0x48>)

static int32_t next_timeout(void)
{
 8002686:	b510      	push	{r4, lr}
 8002688:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800268a:	429c      	cmp	r4, r3
 800268c:	d10a      	bne.n	80026a4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 800268e:	f7ff ffef 	bl	8002670 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 8002692:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <next_timeout+0x4c>)
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	b113      	cbz	r3, 80026a2 <next_timeout+0x1e>
 800269c:	4298      	cmp	r0, r3
 800269e:	bfa8      	it	ge
 80026a0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 80026a2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 80026a4:	f7ff ffe4 	bl	8002670 <elapsed>
	if ((to == NULL) ||
 80026a8:	2c00      	cmp	r4, #0
 80026aa:	d0f2      	beq.n	8002692 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 80026ac:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80026b0:	1a1b      	subs	r3, r3, r0
 80026b2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 80026b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026ba:	f172 0100 	sbcs.w	r1, r2, #0
 80026be:	dae8      	bge.n	8002692 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 80026c0:	2a00      	cmp	r2, #0
 80026c2:	bfac      	ite	ge
 80026c4:	4618      	movge	r0, r3
 80026c6:	2000      	movlt	r0, #0
 80026c8:	e7e5      	b.n	8002696 <next_timeout+0x12>
 80026ca:	bf00      	nop
 80026cc:	20000030 	.word	0x20000030
 80026d0:	20000300 	.word	0x20000300

080026d4 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
 80026d4:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <remove_timeout+0x30>)
 80026d6:	6803      	ldr	r3, [r0, #0]
 80026d8:	6852      	ldr	r2, [r2, #4]
 80026da:	4290      	cmp	r0, r2
{
 80026dc:	b530      	push	{r4, r5, lr}
 80026de:	d009      	beq.n	80026f4 <remove_timeout+0x20>
	if (next(t) != NULL) {
 80026e0:	b143      	cbz	r3, 80026f4 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
 80026e2:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80026e6:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80026ea:	1912      	adds	r2, r2, r4
 80026ec:	eb41 0105 	adc.w	r1, r1, r5
 80026f0:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 80026f4:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 80026f6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80026f8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80026fa:	2300      	movs	r3, #0
	node->prev = NULL;
 80026fc:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002700:	bd30      	pop	{r4, r5, pc}
 8002702:	bf00      	nop
 8002704:	20000030 	.word	0x20000030

08002708 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800270c:	bf08      	it	eq
 800270e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8002712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002714:	4604      	mov	r4, r0
 8002716:	461d      	mov	r5, r3
 8002718:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800271a:	d061      	beq.n	80027e0 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800271c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 800271e:	f04f 0310 	mov.w	r3, #16
 8002722:	f3ef 8711 	mrs	r7, BASEPRI
 8002726:	f383 8812 	msr	BASEPRI_MAX, r3
 800272a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800272e:	3201      	adds	r2, #1
 8002730:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 8002734:	da24      	bge.n	8002780 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8002736:	4930      	ldr	r1, [pc, #192]	; (80027f8 <z_add_timeout+0xf0>)
 8002738:	e9d1 2000 	ldrd	r2, r0, [r1]
 800273c:	f06f 0301 	mvn.w	r3, #1
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002746:	eb62 0000 	sbc.w	r0, r2, r0
 800274a:	1b9e      	subs	r6, r3, r6
 800274c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 8002750:	2e01      	cmp	r6, #1
 8002752:	f170 0300 	sbcs.w	r3, r0, #0
 8002756:	da01      	bge.n	800275c <z_add_timeout+0x54>
 8002758:	2601      	movs	r6, #1
 800275a:	2000      	movs	r0, #0
 800275c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 8002760:	4e26      	ldr	r6, [pc, #152]	; (80027fc <z_add_timeout+0xf4>)
 8002762:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 8002766:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002768:	45b4      	cmp	ip, r6
 800276a:	bf08      	it	eq
 800276c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 8002770:	f1bc 0f00 	cmp.w	ip, #0
 8002774:	d10d      	bne.n	8002792 <z_add_timeout+0x8a>
	node->prev = tail;
 8002776:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 800277a:	602c      	str	r4, [r5, #0]
	list->tail = node;
 800277c:	6074      	str	r4, [r6, #4]
}
 800277e:	e01c      	b.n	80027ba <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 8002780:	f7ff ff76 	bl	8002670 <elapsed>
 8002784:	3601      	adds	r6, #1
 8002786:	f145 0500 	adc.w	r5, r5, #0
 800278a:	1836      	adds	r6, r6, r0
 800278c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8002790:	e7e4      	b.n	800275c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 8002792:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 8002796:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 800279a:	4293      	cmp	r3, r2
 800279c:	eb71 0e00 	sbcs.w	lr, r1, r0
 80027a0:	da1f      	bge.n	80027e2 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
 80027a2:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 80027a4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80027a8:	eb60 0001 	sbc.w	r0, r0, r1
 80027ac:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 80027b0:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 80027b4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80027b6:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 80027ba:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80027bc:	42b3      	cmp	r3, r6
 80027be:	d00b      	beq.n	80027d8 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80027c0:	429c      	cmp	r4, r3
 80027c2:	d109      	bne.n	80027d8 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 80027c4:	f7ff ff5e 	bl	8002684 <next_timeout>

			if (next_time == 0 ||
 80027c8:	b118      	cbz	r0, 80027d2 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	4283      	cmp	r3, r0
 80027d0:	d002      	beq.n	80027d8 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
 80027d2:	2100      	movs	r1, #0
 80027d4:	f7ff f922 	bl	8001a1c <sys_clock_set_timeout>
	__asm__ volatile(
 80027d8:	f387 8811 	msr	BASEPRI, r7
 80027dc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 80027e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 80027e8:	45ac      	cmp	ip, r5
 80027ea:	e9c4 3104 	strd	r3, r1, [r4, #16]
 80027ee:	d0c2      	beq.n	8002776 <z_add_timeout+0x6e>
 80027f0:	f8dc c000 	ldr.w	ip, [ip]
 80027f4:	e7bc      	b.n	8002770 <z_add_timeout+0x68>
 80027f6:	bf00      	nop
 80027f8:	20000170 	.word	0x20000170
 80027fc:	20000030 	.word	0x20000030
 8002800:	20000300 	.word	0x20000300

08002804 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8002804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002808:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800280a:	f7ff fd2b 	bl	8002264 <z_time_slice>
	__asm__ volatile(
 800280e:	f04f 0310 	mov.w	r3, #16
 8002812:	f3ef 8411 	mrs	r4, BASEPRI
 8002816:	f383 8812 	msr	BASEPRI_MAX, r3
 800281a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 800281e:	4e24      	ldr	r6, [pc, #144]	; (80028b0 <sys_clock_announce+0xac>)
	return list->head == list;
 8002820:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80028b4 <sys_clock_announce+0xb0>
 8002824:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8002826:	4d24      	ldr	r5, [pc, #144]	; (80028b8 <sys_clock_announce+0xb4>)
 8002828:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800282c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800282e:	4540      	cmp	r0, r8
		curr_tick += dt;
 8002830:	e9d5 1e00 	ldrd	r1, lr, [r5]
 8002834:	ea4f 77e2 	mov.w	r7, r2, asr #31
 8002838:	d00b      	beq.n	8002852 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800283a:	b150      	cbz	r0, 8002852 <sys_clock_announce+0x4e>
 800283c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 8002840:	429a      	cmp	r2, r3
 8002842:	eb77 090c 	sbcs.w	r9, r7, ip
 8002846:	da16      	bge.n	8002876 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	eb6c 0c07 	sbc.w	ip, ip, r7
 800284e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8002852:	1851      	adds	r1, r2, r1
 8002854:	eb4e 0707 	adc.w	r7, lr, r7
 8002858:	e9c5 1700 	strd	r1, r7, [r5]
	announce_remaining = 0;
 800285c:	2500      	movs	r5, #0
 800285e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8002860:	f7ff ff10 	bl	8002684 <next_timeout>
 8002864:	4629      	mov	r1, r5
 8002866:	f7ff f8d9 	bl	8001a1c <sys_clock_set_timeout>
	__asm__ volatile(
 800286a:	f384 8811 	msr	BASEPRI, r4
 800286e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8002872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8002876:	1859      	adds	r1, r3, r1
 8002878:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8002880:	2200      	movs	r2, #0
 8002882:	2300      	movs	r3, #0
 8002884:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 8002888:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 800288c:	f7ff ff22 	bl	80026d4 <remove_timeout>
 8002890:	f384 8811 	msr	BASEPRI, r4
 8002894:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002898:	6883      	ldr	r3, [r0, #8]
 800289a:	4798      	blx	r3
	__asm__ volatile(
 800289c:	f04f 0310 	mov.w	r3, #16
 80028a0:	f3ef 8411 	mrs	r4, BASEPRI
 80028a4:	f383 8812 	msr	BASEPRI_MAX, r3
 80028a8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80028ac:	e7bc      	b.n	8002828 <sys_clock_announce+0x24>
 80028ae:	bf00      	nop
 80028b0:	20000330 	.word	0x20000330
 80028b4:	20000030 	.word	0x20000030
 80028b8:	20000170 	.word	0x20000170

080028bc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 80028bc:	b510      	push	{r4, lr}
 80028be:	f04f 0310 	mov.w	r3, #16
 80028c2:	f3ef 8411 	mrs	r4, BASEPRI
 80028c6:	f383 8812 	msr	BASEPRI_MAX, r3
 80028ca:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 80028ce:	f7ff f917 	bl	8001b00 <sys_clock_elapsed>
 80028d2:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <sys_clock_tick_get+0x2c>)
 80028d4:	e9d2 3100 	ldrd	r3, r1, [r2]
 80028d8:	18c0      	adds	r0, r0, r3
 80028da:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 80028de:	f384 8811 	msr	BASEPRI, r4
 80028e2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 80028e6:	bd10      	pop	{r4, pc}
 80028e8:	20000170 	.word	0x20000170

080028ec <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 80028ec:	4a02      	ldr	r2, [pc, #8]	; (80028f8 <boot_banner+0xc>)
 80028ee:	4903      	ldr	r1, [pc, #12]	; (80028fc <boot_banner+0x10>)
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <boot_banner+0x14>)
 80028f2:	f000 b843 	b.w	800297c <printk>
 80028f6:	bf00      	nop
 80028f8:	08003ac6 	.word	0x08003ac6
 80028fc:	08003a92 	.word	0x08003a92
 8002900:	08003aa0 	.word	0x08003aa0

08002904 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8002904:	4770      	bx	lr

08002906 <gpio_pin_configure_dt>:
{
 8002906:	b470      	push	{r4, r5, r6}
 8002908:	4603      	mov	r3, r0
 800290a:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
 800290c:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
 800290e:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
 8002910:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
 8002912:	4322      	orrs	r2, r4
	struct gpio_driver_data *data =
 8002914:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
 8002916:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8002918:	682b      	ldr	r3, [r5, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800291a:	2401      	movs	r4, #1
 800291c:	408c      	lsls	r4, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800291e:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002922:	bf14      	ite	ne
 8002924:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8002926:	43a3      	biceq	r3, r4
 8002928:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
 800292a:	6833      	ldr	r3, [r6, #0]
}
 800292c:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
 800292e:	4718      	bx	r3

08002930 <gpio_pin_get>:
{
 8002930:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct gpio_driver_data *const data =
 8002932:	6905      	ldr	r5, [r0, #16]
{
 8002934:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
 8002936:	6883      	ldr	r3, [r0, #8]
 8002938:	a901      	add	r1, sp, #4
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4798      	blx	r3
	if (ret == 0) {
 800293e:	b948      	cbnz	r0, 8002954 <gpio_pin_get+0x24>
		*value ^= data->invert;
 8002940:	9b01      	ldr	r3, [sp, #4]
 8002942:	682a      	ldr	r2, [r5, #0]
 8002944:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8002946:	2301      	movs	r3, #1
 8002948:	fa03 f104 	lsl.w	r1, r3, r4
 800294c:	420a      	tst	r2, r1
 800294e:	bf14      	ite	ne
 8002950:	4618      	movne	r0, r3
 8002952:	2000      	moveq	r0, #0
}
 8002954:	b003      	add	sp, #12
 8002956:	bd30      	pop	{r4, r5, pc}

08002958 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8002958:	2301      	movs	r3, #1
 800295a:	fa03 f101 	lsl.w	r1, r3, r1
 800295e:	6903      	ldr	r3, [r0, #16]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4219      	tst	r1, r3
 8002964:	d003      	beq.n	800296e <gpio_pin_set.isra.0+0x16>
	if (value != 0)	{
 8002966:	b122      	cbz	r2, 8002972 <gpio_pin_set.isra.0+0x1a>
	return api->port_clear_bits_raw(port, pins);
 8002968:	6883      	ldr	r3, [r0, #8]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	e003      	b.n	8002976 <gpio_pin_set.isra.0+0x1e>
	if (value != 0)	{
 800296e:	2a00      	cmp	r2, #0
 8002970:	d0fa      	beq.n	8002968 <gpio_pin_set.isra.0+0x10>
	return api->port_set_bits_raw(port, pins);
 8002972:	6883      	ldr	r3, [r0, #8]
 8002974:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8002976:	4718      	bx	r3

08002978 <arch_printk_char_out>:
}
 8002978:	2000      	movs	r0, #0
 800297a:	4770      	bx	lr

0800297c <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 800297c:	b40f      	push	{r0, r1, r2, r3}
 800297e:	b507      	push	{r0, r1, r2, lr}
 8002980:	a904      	add	r1, sp, #16
 8002982:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8002986:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 8002988:	f7fd fde0 	bl	800054c <vprintk>

	va_end(ap);
}
 800298c:	b003      	add	sp, #12
 800298e:	f85d eb04 	ldr.w	lr, [sp], #4
 8002992:	b004      	add	sp, #16
 8002994:	4770      	bx	lr

08002996 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8002996:	4604      	mov	r4, r0
 8002998:	b508      	push	{r3, lr}
 800299a:	4608      	mov	r0, r1
 800299c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800299e:	461a      	mov	r2, r3
 80029a0:	47a0      	blx	r4
	return z_impl_z_current_get();
 80029a2:	f7ff fdd9 	bl	8002558 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 80029a6:	f7fe fbe7 	bl	8001178 <z_impl_k_thread_abort>

080029aa <encode_uint>:
{
 80029aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ae:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 80029b0:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 80029b2:	2b6f      	cmp	r3, #111	; 0x6f
{
 80029b4:	4680      	mov	r8, r0
 80029b6:	460f      	mov	r7, r1
 80029b8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 80029ba:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 80029be:	d029      	beq.n	8002a14 <encode_uint+0x6a>
 80029c0:	d824      	bhi.n	8002a0c <encode_uint+0x62>
		return 10;
 80029c2:	2b58      	cmp	r3, #88	; 0x58
 80029c4:	bf0c      	ite	eq
 80029c6:	2610      	moveq	r6, #16
 80029c8:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 80029ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 80029ce:	4632      	mov	r2, r6
 80029d0:	2300      	movs	r3, #0
 80029d2:	4640      	mov	r0, r8
 80029d4:	4639      	mov	r1, r7
 80029d6:	f7fd fbe9 	bl	80001ac <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80029da:	2a09      	cmp	r2, #9
 80029dc:	b2d4      	uxtb	r4, r2
 80029de:	d81e      	bhi.n	8002a1e <encode_uint+0x74>
 80029e0:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 80029e2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80029e4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 80029e6:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80029ea:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 80029ee:	d301      	bcc.n	80029f4 <encode_uint+0x4a>
 80029f0:	45d1      	cmp	r9, sl
 80029f2:	d811      	bhi.n	8002a18 <encode_uint+0x6e>
	if (conv->flag_hash) {
 80029f4:	782b      	ldrb	r3, [r5, #0]
 80029f6:	069b      	lsls	r3, r3, #26
 80029f8:	d505      	bpl.n	8002a06 <encode_uint+0x5c>
		if (radix == 8) {
 80029fa:	2e08      	cmp	r6, #8
 80029fc:	d115      	bne.n	8002a2a <encode_uint+0x80>
			conv->altform_0 = true;
 80029fe:	78ab      	ldrb	r3, [r5, #2]
 8002a00:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8002a04:	70ab      	strb	r3, [r5, #2]
}
 8002a06:	4648      	mov	r0, r9
 8002a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8002a0c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 8002a10:	2b70      	cmp	r3, #112	; 0x70
 8002a12:	e7d7      	b.n	80029c4 <encode_uint+0x1a>
	switch (specifier) {
 8002a14:	2608      	movs	r6, #8
 8002a16:	e7d8      	b.n	80029ca <encode_uint+0x20>
		value /= radix;
 8002a18:	4680      	mov	r8, r0
 8002a1a:	460f      	mov	r7, r1
 8002a1c:	e7d7      	b.n	80029ce <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002a1e:	f1bb 0f19 	cmp.w	fp, #25
 8002a22:	bf94      	ite	ls
 8002a24:	3437      	addls	r4, #55	; 0x37
 8002a26:	3457      	addhi	r4, #87	; 0x57
 8002a28:	e7db      	b.n	80029e2 <encode_uint+0x38>
		} else if (radix == 16) {
 8002a2a:	2e10      	cmp	r6, #16
 8002a2c:	d1eb      	bne.n	8002a06 <encode_uint+0x5c>
			conv->altform_0c = true;
 8002a2e:	78ab      	ldrb	r3, [r5, #2]
 8002a30:	f043 0310 	orr.w	r3, r3, #16
 8002a34:	e7e6      	b.n	8002a04 <encode_uint+0x5a>

08002a36 <outs>:
{
 8002a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a3a:	4607      	mov	r7, r0
 8002a3c:	4688      	mov	r8, r1
 8002a3e:	4615      	mov	r5, r2
 8002a40:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002a42:	4614      	mov	r4, r2
 8002a44:	42b4      	cmp	r4, r6
 8002a46:	d305      	bcc.n	8002a54 <outs+0x1e>
 8002a48:	b10e      	cbz	r6, 8002a4e <outs+0x18>
	return (int)count;
 8002a4a:	1b60      	subs	r0, r4, r5
 8002a4c:	e008      	b.n	8002a60 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002a4e:	7823      	ldrb	r3, [r4, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0fa      	beq.n	8002a4a <outs+0x14>
		int rc = out((int)*sp++, ctx);
 8002a54:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002a58:	4641      	mov	r1, r8
 8002a5a:	47b8      	blx	r7
		if (rc < 0) {
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	daf1      	bge.n	8002a44 <outs+0xe>
}
 8002a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a64 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
 8002a64:	4770      	bx	lr

08002a66 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8002a66:	2000      	movs	r0, #0
 8002a68:	4770      	bx	lr

08002a6a <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002a6a:	f000 bb0b 	b.w	8003084 <z_fatal_error>

08002a6e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8002a6e:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002a70:	6800      	ldr	r0, [r0, #0]
 8002a72:	f000 bb07 	b.w	8003084 <z_fatal_error>

08002a76 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002a76:	2100      	movs	r1, #0
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f7ff bff6 	b.w	8002a6a <z_arm_fatal_error>

08002a7e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8002a7e:	b508      	push	{r3, lr}
	handler();
 8002a80:	f7fe f97e 	bl	8000d80 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002a84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002a88:	f7fe ba52 	b.w	8000f30 <z_arm_exc_exit>

08002a8c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8002a8c:	4603      	mov	r3, r0
	size_t n = 0;
 8002a8e:	2000      	movs	r0, #0

	while (*s != '\0') {
 8002a90:	5c1a      	ldrb	r2, [r3, r0]
 8002a92:	b902      	cbnz	r2, 8002a96 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8002a94:	4770      	bx	lr
		n++;
 8002a96:	3001      	adds	r0, #1
 8002a98:	e7fa      	b.n	8002a90 <strlen+0x4>

08002a9a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8002a9a:	4603      	mov	r3, r0
	size_t n = 0;
 8002a9c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8002a9e:	5c1a      	ldrb	r2, [r3, r0]
 8002aa0:	b10a      	cbz	r2, 8002aa6 <strnlen+0xc>
 8002aa2:	4288      	cmp	r0, r1
 8002aa4:	d100      	bne.n	8002aa8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8002aa6:	4770      	bx	lr
		n++;
 8002aa8:	3001      	adds	r0, #1
 8002aaa:	e7f8      	b.n	8002a9e <strnlen+0x4>

08002aac <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8002aac:	b510      	push	{r4, lr}
 8002aae:	1e43      	subs	r3, r0, #1
 8002ab0:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002ab2:	4291      	cmp	r1, r2
 8002ab4:	d100      	bne.n	8002ab8 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8002ab6:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8002ab8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002abc:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002ac0:	e7f7      	b.n	8002ab2 <memcpy+0x6>

08002ac2 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002ac2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8002ac4:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 8002ac6:	4603      	mov	r3, r0
	while (n > 0) {
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d100      	bne.n	8002ace <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8002acc:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8002ace:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002ad2:	e7f9      	b.n	8002ac8 <memset+0x6>

08002ad4 <_stdout_hook_default>:
}
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ad8:	4770      	bx	lr

08002ada <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8002ada:	2200      	movs	r2, #0
{
 8002adc:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8002ade:	4611      	mov	r1, r2
 8002ae0:	2006      	movs	r0, #6
 8002ae2:	f7fe f935 	bl	8000d50 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	4611      	mov	r1, r2
 8002aea:	2007      	movs	r0, #7
 8002aec:	f7fe f930 	bl	8000d50 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8002af0:	2200      	movs	r2, #0
 8002af2:	4611      	mov	r1, r2
 8002af4:	2008      	movs	r0, #8
 8002af6:	f7fe f92b 	bl	8000d50 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8002afa:	2200      	movs	r2, #0
 8002afc:	4611      	mov	r1, r2
 8002afe:	2009      	movs	r0, #9
 8002b00:	f7fe f926 	bl	8000d50 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8002b04:	2200      	movs	r2, #0
 8002b06:	4611      	mov	r1, r2
 8002b08:	200a      	movs	r0, #10
 8002b0a:	f7fe f921 	bl	8000d50 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4611      	mov	r1, r2
 8002b12:	2017      	movs	r0, #23
 8002b14:	f7fe f91c 	bl	8000d50 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	2028      	movs	r0, #40	; 0x28
 8002b1e:	f7fe f917 	bl	8000d50 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8002b22:	2200      	movs	r2, #0
 8002b24:	4611      	mov	r1, r2
 8002b26:	2001      	movs	r0, #1
 8002b28:	f7fe f912 	bl	8000d50 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	4611      	mov	r1, r2
 8002b30:	202a      	movs	r0, #42	; 0x2a
 8002b32:	f7fe f90d 	bl	8000d50 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8002b36:	2200      	movs	r2, #0
 8002b38:	4611      	mov	r1, r2
 8002b3a:	2002      	movs	r0, #2
 8002b3c:	f7fe f908 	bl	8000d50 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8002b40:	2200      	movs	r2, #0
 8002b42:	4611      	mov	r1, r2
 8002b44:	2003      	movs	r0, #3
 8002b46:	f7fe f903 	bl	8000d50 <z_arm_irq_priority_set>
}
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	bd08      	pop	{r3, pc}

08002b4e <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, dev);
 8002b4e:	6902      	ldr	r2, [r0, #16]
 8002b50:	2117      	movs	r1, #23
 8002b52:	2016      	movs	r0, #22
 8002b54:	f7fe bbf4 	b.w	8001340 <__stm32_exti_isr.isra.0>

08002b58 <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, dev);
 8002b58:	6902      	ldr	r2, [r0, #16]
 8002b5a:	2116      	movs	r1, #22
 8002b5c:	2015      	movs	r0, #21
 8002b5e:	f7fe bbef 	b.w	8001340 <__stm32_exti_isr.isra.0>

08002b62 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, dev);
 8002b62:	6902      	ldr	r2, [r0, #16]
 8002b64:	2113      	movs	r1, #19
 8002b66:	2012      	movs	r0, #18
 8002b68:	f7fe bbea 	b.w	8001340 <__stm32_exti_isr.isra.0>

08002b6c <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, dev);
 8002b6c:	6902      	ldr	r2, [r0, #16]
 8002b6e:	2111      	movs	r1, #17
 8002b70:	2010      	movs	r0, #16
 8002b72:	f7fe bbe5 	b.w	8001340 <__stm32_exti_isr.isra.0>

08002b76 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 8002b76:	6902      	ldr	r2, [r0, #16]
 8002b78:	2110      	movs	r1, #16
 8002b7a:	200a      	movs	r0, #10
 8002b7c:	f7fe bbe0 	b.w	8001340 <__stm32_exti_isr.isra.0>

08002b80 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 8002b80:	6902      	ldr	r2, [r0, #16]
 8002b82:	210a      	movs	r1, #10
 8002b84:	2005      	movs	r0, #5
 8002b86:	f7fe bbdb 	b.w	8001340 <__stm32_exti_isr.isra.0>

08002b8a <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 8002b8a:	6902      	ldr	r2, [r0, #16]
 8002b8c:	2105      	movs	r1, #5
 8002b8e:	2004      	movs	r0, #4
 8002b90:	f7fe bbd6 	b.w	8001340 <__stm32_exti_isr.isra.0>

08002b94 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 8002b94:	6902      	ldr	r2, [r0, #16]
 8002b96:	2104      	movs	r1, #4
 8002b98:	2003      	movs	r0, #3
 8002b9a:	f7fe bbd1 	b.w	8001340 <__stm32_exti_isr.isra.0>

08002b9e <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 8002b9e:	6902      	ldr	r2, [r0, #16]
 8002ba0:	2103      	movs	r1, #3
 8002ba2:	2002      	movs	r0, #2
 8002ba4:	f7fe bbcc 	b.w	8001340 <__stm32_exti_isr.isra.0>

08002ba8 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 8002ba8:	6902      	ldr	r2, [r0, #16]
 8002baa:	2102      	movs	r1, #2
 8002bac:	2001      	movs	r0, #1
 8002bae:	f7fe bbc7 	b.w	8001340 <__stm32_exti_isr.isra.0>

08002bb2 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 8002bb2:	6902      	ldr	r2, [r0, #16]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7fe bbc2 	b.w	8001340 <__stm32_exti_isr.isra.0>

08002bbc <stm32_clock_control_on>:
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 8002bbc:	680b      	ldr	r3, [r1, #0]
	reg_val |= pclken->enr;
 8002bbe:	6849      	ldr	r1, [r1, #4]
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 8002bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bc4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
}
 8002bc8:	2000      	movs	r0, #0
	reg_val = *reg;
 8002bca:	681a      	ldr	r2, [r3, #0]
	reg_val |= pclken->enr;
 8002bcc:	430a      	orrs	r2, r1
	*reg = reg_val;
 8002bce:	601a      	str	r2, [r3, #0]
}
 8002bd0:	4770      	bx	lr

08002bd2 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8002bd2:	680b      	ldr	r3, [r1, #0]
 8002bd4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002bd8:	2a78      	cmp	r2, #120	; 0x78
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 8002bda:	bf9f      	itttt	ls
 8002bdc:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8002be0:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800
	reg_val &= ~pclken->enr;
 8002be4:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 8002be6:	681a      	ldrls	r2, [r3, #0]
	reg_val &= ~pclken->enr;
 8002be8:	bf9d      	ittte	ls
 8002bea:	438a      	bicls	r2, r1
	return 0;
 8002bec:	2000      	movls	r0, #0
	*reg = reg_val;
 8002bee:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8002bf0:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8002bf4:	4770      	bx	lr

08002bf6 <stm32_clock_control_configure>:
}
 8002bf6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002bfa:	4770      	bx	lr

08002bfc <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bfc:	6843      	ldr	r3, [r0, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8002c00:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8002c02:	600b      	str	r3, [r1, #0]
}
 8002c04:	2000      	movs	r0, #0
 8002c06:	4770      	bx	lr

08002c08 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c08:	6843      	ldr	r3, [r0, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8002c0c:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8002c0e:	4042      	eors	r2, r0
 8002c10:	400a      	ands	r2, r1
 8002c12:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8002c14:	615a      	str	r2, [r3, #20]
}
 8002c16:	2000      	movs	r0, #0
 8002c18:	4770      	bx	lr

08002c1a <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c1a:	6843      	ldr	r3, [r0, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
}
 8002c1e:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8002c20:	6199      	str	r1, [r3, #24]
}
 8002c22:	4770      	bx	lr

08002c24 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c24:	6843      	ldr	r3, [r0, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002c28:	0409      	lsls	r1, r1, #16
 8002c2a:	6199      	str	r1, [r3, #24]
}
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	4770      	bx	lr

08002c30 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c30:	6843      	ldr	r3, [r0, #4]
 8002c32:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8002c34:	6953      	ldr	r3, [r2, #20]
 8002c36:	404b      	eors	r3, r1
 8002c38:	6153      	str	r3, [r2, #20]
}
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	4770      	bx	lr

08002c3e <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->data;
 8002c3e:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8002c40:	6898      	ldr	r0, [r3, #8]
{
 8002c42:	b510      	push	{r4, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8002c44:	b148      	cbz	r0, 8002c5a <gpio_stm32_manage_callback+0x1c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002c46:	4288      	cmp	r0, r1
 8002c48:	d113      	bne.n	8002c72 <gpio_stm32_manage_callback+0x34>
Z_GENLIST_REMOVE(slist, snode)
 8002c4a:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 8002c4c:	6808      	ldr	r0, [r1, #0]
	list->head = node;
 8002c4e:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8002c50:	42a1      	cmp	r1, r4
 8002c52:	d100      	bne.n	8002c56 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8002c54:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8002c56:	2000      	movs	r0, #0
 8002c58:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8002c5a:	b97a      	cbnz	r2, 8002c7c <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8002c5c:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 8002c5e:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002c60:	4281      	cmp	r1, r0
 8002c62:	d106      	bne.n	8002c72 <gpio_stm32_manage_callback+0x34>
	return node->next;
 8002c64:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 8002c66:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8002c68:	68d8      	ldr	r0, [r3, #12]
 8002c6a:	4281      	cmp	r1, r0
 8002c6c:	d1f3      	bne.n	8002c56 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8002c6e:	60dc      	str	r4, [r3, #12]
}
 8002c70:	e7f1      	b.n	8002c56 <gpio_stm32_manage_callback+0x18>
	return node->next;
 8002c72:	4604      	mov	r4, r0
 8002c74:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002c76:	2800      	cmp	r0, #0
 8002c78:	d1f2      	bne.n	8002c60 <gpio_stm32_manage_callback+0x22>
			if (!set) {
 8002c7a:	b13a      	cbz	r2, 8002c8c <gpio_stm32_manage_callback+0x4e>
	parent->next = child;
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8002c80:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 8002c82:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8002c84:	2a00      	cmp	r2, #0
 8002c86:	d1e9      	bne.n	8002c5c <gpio_stm32_manage_callback+0x1e>
	list->tail = node;
 8002c88:	60d9      	str	r1, [r3, #12]
}
 8002c8a:	e7e7      	b.n	8002c5c <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 8002c8c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8002c90:	e7e5      	b.n	8002c5e <gpio_stm32_manage_callback+0x20>

08002c92 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8002c92:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 8002c94:	6903      	ldr	r3, [r0, #16]
 8002c96:	6058      	str	r0, [r3, #4]
					(clock_control_subsys_t *)&cfg->pclken);
 8002c98:	6840      	ldr	r0, [r0, #4]
		ret = clock_control_on(clk,
 8002c9a:	300c      	adds	r0, #12
 8002c9c:	f7fe fcc0 	bl	8001620 <clock_control_on.constprop.0>

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8002ca0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8002ca4:	bd08      	pop	{r3, pc}

08002ca6 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8002ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002ca8:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8002caa:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002cac:	6867      	ldr	r7, [r4, #4]
 8002cae:	4088      	lsls	r0, r1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8002cb0:	461e      	mov	r6, r3
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002cb2:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8002cb6:	ea27 0700 	bic.w	r7, r7, r0
 8002cba:	408b      	lsls	r3, r1
 8002cbc:	433b      	orrs	r3, r7
 8002cbe:	6063      	str	r3, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002cc4:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002cc8:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8002ccc:	f04f 0e03 	mov.w	lr, #3
 8002cd0:	007f      	lsls	r7, r7, #1
 8002cd2:	fa0e f707 	lsl.w	r7, lr, r7
 8002cd6:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002cde:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002ce2:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 8002ce6:	007f      	lsls	r7, r7, #1
 8002ce8:	40bb      	lsls	r3, r7
 8002cea:	ea43 030c 	orr.w	r3, r3, ip
 8002cee:	60a3      	str	r3, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002cf4:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002cf8:	68e7      	ldr	r7, [r4, #12]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa0e f303 	lsl.w	r3, lr, r3
 8002d00:	ea27 0703 	bic.w	r7, r7, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8002d10:	005b      	lsls	r3, r3, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8002d12:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8002d16:	409a      	lsls	r2, r3
 8002d18:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8002d1a:	2d20      	cmp	r5, #32
 8002d1c:	60e2      	str	r2, [r4, #12]
 8002d1e:	d116      	bne.n	8002d4e <gpio_stm32_configure_raw.isra.0+0xa8>
		if (pin < 8) {
 8002d20:	2907      	cmp	r1, #7
 8002d22:	dc2b      	bgt.n	8002d7c <gpio_stm32_configure_raw.isra.0+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	fa90 f3a0 	rbit	r3, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002d28:	6a22      	ldr	r2, [r4, #32]
  if (value == 0U)
 8002d2a:	b32b      	cbz	r3, 8002d78 <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	210f      	movs	r1, #15
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	ea22 0203 	bic.w	r2, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	fa06 f303 	lsl.w	r3, r6, r3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002d52:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d56:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	fa90 f0a0 	rbit	r0, r0
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8002d60:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8002d64:	092d      	lsrs	r5, r5, #4
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	0040      	lsls	r0, r0, #1
 8002d6c:	ea22 0303 	bic.w	r3, r2, r3
 8002d70:	4085      	lsls	r5, r0
 8002d72:	431d      	orrs	r5, r3
 8002d74:	6025      	str	r5, [r4, #0]
}
 8002d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8002d78:	462b      	mov	r3, r5
 8002d7a:	e7d9      	b.n	8002d30 <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002d7c:	0a03      	lsrs	r3, r0, #8
 8002d7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8002d84:	b182      	cbz	r2, 8002da8 <gpio_stm32_configure_raw.isra.0+0x102>
  return __builtin_clz(value);
 8002d86:	fab2 f282 	clz	r2, r2
 8002d8a:	0092      	lsls	r2, r2, #2
 8002d8c:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	fa07 f202 	lsl.w	r2, r7, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	ea21 0202 	bic.w	r2, r1, r2
 8002da0:	409e      	lsls	r6, r3
 8002da2:	4316      	orrs	r6, r2
 8002da4:	6266      	str	r6, [r4, #36]	; 0x24
}
 8002da6:	e7d2      	b.n	8002d4e <gpio_stm32_configure_raw.isra.0+0xa8>
    return 32U;
 8002da8:	462a      	mov	r2, r5
 8002daa:	e7ee      	b.n	8002d8a <gpio_stm32_configure_raw.isra.0+0xe4>

08002dac <gpio_stm32_config>:
{
 8002dac:	b538      	push	{r3, r4, r5, lr}
 8002dae:	4604      	mov	r4, r0
	if ((flags & GPIO_OUTPUT) != 0) {
 8002db0:	0390      	lsls	r0, r2, #14
{
 8002db2:	460d      	mov	r5, r1
 8002db4:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8002db6:	d517      	bpl.n	8002de8 <gpio_stm32_config+0x3c>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8002db8:	0791      	lsls	r1, r2, #30
 8002dba:	d50e      	bpl.n	8002dda <gpio_stm32_config+0x2e>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8002dbc:	075a      	lsls	r2, r3, #29
 8002dbe:	d52e      	bpl.n	8002e1e <gpio_stm32_config+0x72>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8002dc0:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8002dc2:	06d8      	lsls	r0, r3, #27
 8002dc4:	d50b      	bpl.n	8002dde <gpio_stm32_config+0x32>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8002dca:	0319      	lsls	r1, r3, #12
 8002dcc:	d51a      	bpl.n	8002e04 <gpio_stm32_config+0x58>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002dce:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002dd0:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002dd2:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002dd4:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 8002dd6:	618b      	str	r3, [r1, #24]
	return 0;
 8002dd8:	e00d      	b.n	8002df6 <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8002dda:	2210      	movs	r2, #16
 8002ddc:	e7f1      	b.n	8002dc2 <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002dde:	0699      	lsls	r1, r3, #26
 8002de0:	d5f3      	bpl.n	8002dca <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002de2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8002de6:	e7f0      	b.n	8002dca <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8002de8:	03da      	lsls	r2, r3, #15
 8002dea:	d513      	bpl.n	8002e14 <gpio_stm32_config+0x68>
		if ((flags & GPIO_PULL_UP) != 0) {
 8002dec:	06d8      	lsls	r0, r3, #27
 8002dee:	d413      	bmi.n	8002e18 <gpio_stm32_config+0x6c>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002df0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002df4:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8002df6:	6860      	ldr	r0, [r4, #4]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	f7ff ff53 	bl	8002ca6 <gpio_stm32_configure_raw.isra.0>
	return 0;
 8002e00:	2000      	movs	r0, #0
}
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8002e04:	035b      	lsls	r3, r3, #13
 8002e06:	d5f6      	bpl.n	8002df6 <gpio_stm32_config+0x4a>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002e08:	2101      	movs	r1, #1
 8002e0a:	40a9      	lsls	r1, r5
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f7ff ff09 	bl	8002c24 <gpio_stm32_port_clear_bits_raw>
 8002e12:	e7f0      	b.n	8002df6 <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8002e14:	2230      	movs	r2, #48	; 0x30
 8002e16:	e7ee      	b.n	8002df6 <gpio_stm32_config+0x4a>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e1c:	e7eb      	b.n	8002df6 <gpio_stm32_config+0x4a>
				return -ENOTSUP;
 8002e1e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002e22:	e7ee      	b.n	8002e02 <gpio_stm32_config+0x56>

08002e24 <gpio_stm32_isr>:
{
 8002e24:	460b      	mov	r3, r1
 8002e26:	6889      	ldr	r1, [r1, #8]
 8002e28:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002e2a:	b121      	cbz	r1, 8002e36 <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8002e2c:	2501      	movs	r5, #1
 8002e2e:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8002e30:	680c      	ldr	r4, [r1, #0]
 8002e32:	4085      	lsls	r5, r0
 8002e34:	b901      	cbnz	r1, 8002e38 <gpio_stm32_isr+0x14>
}
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 8002e38:	688a      	ldr	r2, [r1, #8]
 8002e3a:	402a      	ands	r2, r5
 8002e3c:	d002      	beq.n	8002e44 <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8002e3e:	684b      	ldr	r3, [r1, #4]
 8002e40:	4630      	mov	r0, r6
 8002e42:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002e44:	b11c      	cbz	r4, 8002e4e <gpio_stm32_isr+0x2a>
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	4621      	mov	r1, r4
 8002e4a:	461c      	mov	r4, r3
 8002e4c:	e7f2      	b.n	8002e34 <gpio_stm32_isr+0x10>
 8002e4e:	4623      	mov	r3, r4
 8002e50:	e7fa      	b.n	8002e48 <gpio_stm32_isr+0x24>

08002e52 <gpio_stm32_configure>:
{
 8002e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e56:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8002e5a:	461f      	mov	r7, r3
 8002e5c:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8002e5e:	4640      	mov	r0, r8
{
 8002e60:	460e      	mov	r6, r1
 8002e62:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8002e64:	f7ff ff1f 	bl	8002ca6 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 8002e68:	2f11      	cmp	r7, #17
 8002e6a:	d107      	bne.n	8002e7c <gpio_stm32_configure+0x2a>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002e6c:	2101      	movs	r1, #1
		if (gpio_out == STM32_ODR_1) {
 8002e6e:	052b      	lsls	r3, r5, #20
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002e70:	fa01 f106 	lsl.w	r1, r1, r6
		if (gpio_out == STM32_ODR_1) {
 8002e74:	d505      	bpl.n	8002e82 <gpio_stm32_configure+0x30>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002e76:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_REG(gpio->BSRR, pins);
 8002e7a:	6199      	str	r1, [r3, #24]
}
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7ff fece 	bl	8002c24 <gpio_stm32_port_clear_bits_raw>
 8002e88:	e7f8      	b.n	8002e7c <gpio_stm32_configure+0x2a>

08002e8a <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           PE            LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8002e8a:	b082      	sub	sp, #8
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002e8c:	6803      	ldr	r3, [r0, #0]
 8002e8e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002e90:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8002e92:	6843      	ldr	r3, [r0, #4]
 8002e94:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002e96:	9b01      	ldr	r3, [sp, #4]
}
 8002e98:	b002      	add	sp, #8
 8002e9a:	4770      	bx	lr

08002e9c <uart_stm32_poll_in>:
{
 8002e9c:	b508      	push	{r3, lr}
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8002e9e:	6843      	ldr	r3, [r0, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002ea2:	6803      	ldr	r3, [r0, #0]
 8002ea4:	071a      	lsls	r2, r3, #28
 8002ea6:	d501      	bpl.n	8002eac <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(config->usart);
 8002ea8:	f7ff ffef 	bl	8002e8a <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002eac:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 8002eae:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002eb0:	bf43      	ittte	mi
 8002eb2:	6843      	ldrmi	r3, [r0, #4]
 8002eb4:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8002eb6:	2000      	movmi	r0, #0
		return -1;
 8002eb8:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8002ebc:	bd08      	pop	{r3, pc}

08002ebe <uart_stm32_poll_out>:
{
 8002ebe:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 8002ec0:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8002ec2:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002ec4:	6813      	ldr	r3, [r2, #0]
 8002ec6:	061b      	lsls	r3, r3, #24
 8002ec8:	d5fc      	bpl.n	8002ec4 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 8002eca:	f04f 0210 	mov.w	r2, #16
 8002ece:	f3ef 8311 	mrs	r3, BASEPRI
 8002ed2:	f382 8812 	msr	BASEPRI_MAX, r2
 8002ed6:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8002eda:	6802      	ldr	r2, [r0, #0]
 8002edc:	6814      	ldr	r4, [r2, #0]
 8002ede:	0624      	lsls	r4, r4, #24
 8002ee0:	d404      	bmi.n	8002eec <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8002eea:	e7ea      	b.n	8002ec2 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8002eec:	6051      	str	r1, [r2, #4]
	__asm__ volatile(
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
}
 8002ef6:	bd10      	pop	{r4, pc}

08002ef8 <uart_stm32_err_check>:
{
 8002ef8:	b508      	push	{r3, lr}
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8002efa:	6843      	ldr	r3, [r0, #4]
 8002efc:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002efe:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8002f00:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 8002f02:	07d9      	lsls	r1, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8002f04:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8002f06:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 8002f0a:	bf48      	it	mi
 8002f0c:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(config->usart)) {
 8002f10:	079b      	lsls	r3, r3, #30
  return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
 8002f12:	6803      	ldr	r3, [r0, #0]
		err |= UART_ERROR_FRAMING;
 8002f14:	bf48      	it	mi
 8002f16:	f042 0204 	orrmi.w	r2, r2, #4
	if (LL_USART_IsActiveFlag_LBD(config->usart)) {
 8002f1a:	05d9      	lsls	r1, r3, #23
  WRITE_REG(USARTx->SR, ~(USART_SR_LBD));
 8002f1c:	bf42      	ittt	mi
 8002f1e:	f46f 7380 	mvnmi.w	r3, #256	; 0x100
		err |= UART_BREAK;
 8002f22:	f042 0208 	orrmi.w	r2, r2, #8
 8002f26:	6003      	strmi	r3, [r0, #0]
	if (err & UART_ERROR_OVERRUN) {
 8002f28:	07d3      	lsls	r3, r2, #31
 8002f2a:	d501      	bpl.n	8002f30 <uart_stm32_err_check+0x38>
		LL_USART_ClearFlag_ORE(config->usart);
 8002f2c:	f7ff ffad 	bl	8002e8a <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8002f30:	0791      	lsls	r1, r2, #30
 8002f32:	d501      	bpl.n	8002f38 <uart_stm32_err_check+0x40>
		LL_USART_ClearFlag_PE(config->usart);
 8002f34:	f7ff ffa9 	bl	8002e8a <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8002f38:	0753      	lsls	r3, r2, #29
 8002f3a:	d501      	bpl.n	8002f40 <uart_stm32_err_check+0x48>
		LL_USART_ClearFlag_FE(config->usart);
 8002f3c:	f7ff ffa5 	bl	8002e8a <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(config->usart);
 8002f40:	f7ff ffa3 	bl	8002e8a <LL_USART_ClearFlag_FE>
}
 8002f44:	4610      	mov	r0, r2
 8002f46:	bd08      	pop	{r3, pc}

08002f48 <uart_stm32_set_baudrate>:
{
 8002f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (clock_control_get_rate(data->clock,
 8002f4a:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8002f4c:	6846      	ldr	r6, [r0, #4]
		if (clock_control_get_rate(data->clock,
 8002f4e:	685c      	ldr	r4, [r3, #4]
					   (clock_control_subsys_t)&config->pclken[0],
 8002f50:	6877      	ldr	r7, [r6, #4]
{
 8002f52:	460d      	mov	r5, r1
 8002f54:	4620      	mov	r0, r4
 8002f56:	f000 f87f 	bl	8003058 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 8002f5a:	b310      	cbz	r0, 8002fa2 <uart_stm32_set_baudrate+0x5a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8002f5c:	68a3      	ldr	r3, [r4, #8]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	b1fb      	cbz	r3, 8002fa2 <uart_stm32_set_baudrate+0x5a>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8002f62:	aa01      	add	r2, sp, #4
 8002f64:	4639      	mov	r1, r7
 8002f66:	4620      	mov	r0, r4
 8002f68:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	db19      	blt.n	8002fa2 <uart_stm32_set_baudrate+0x5a>
		LL_USART_SetOverSampling(config->usart,
 8002f6e:	6834      	ldr	r4, [r6, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002f70:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8002f72:	68e3      	ldr	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002f74:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8002f76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f7a:	60e3      	str	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002f7c:	00aa      	lsls	r2, r5, #2
 8002f7e:	0fab      	lsrs	r3, r5, #30
 8002f80:	fba0 0101 	umull	r0, r1, r0, r1
 8002f84:	f7fd f912 	bl	80001ac <__aeabi_uldivmod>
 8002f88:	2264      	movs	r2, #100	; 0x64
 8002f8a:	fbb0 f1f2 	udiv	r1, r0, r2
 8002f8e:	fb02 0311 	mls	r3, r2, r1, r0
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	3332      	adds	r3, #50	; 0x32
 8002f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f9a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	60a3      	str	r3, [r4, #8]
}
 8002fa2:	b003      	add	sp, #12
 8002fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fa6 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8002fa6:	6903      	ldr	r3, [r0, #16]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 8002fac:	6843      	ldr	r3, [r0, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002fb0:	68d3      	ldr	r3, [r2, #12]
 8002fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fba:	d029      	beq.n	8003010 <uart_stm32_config_get+0x6a>
 8002fbc:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8002fc0:	f1dc 0300 	rsbs	r3, ip, #0
 8002fc4:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8002fc8:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8002fca:	6913      	ldr	r3, [r2, #16]
 8002fcc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	d01e      	beq.n	8003014 <uart_stm32_config_get+0x6e>
 8002fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fda:	d01d      	beq.n	8003018 <uart_stm32_config_get+0x72>
		return UART_CFG_STOP_BITS_2;
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8002fe4:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8002fe6:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002fe8:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 8002fea:	04c0      	lsls	r0, r0, #19
 8002fec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ff0:	d514      	bpl.n	800301c <uart_stm32_config_get+0x76>
			return UART_CFG_DATA_BITS_9;
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf14      	ite	ne
 8002ff6:	2303      	movne	r3, #3
 8002ff8:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8002ffa:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8002ffc:	6953      	ldr	r3, [r2, #20]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8003002:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8003006:	4253      	negs	r3, r2
 8003008:	4153      	adcs	r3, r2
 800300a:	71cb      	strb	r3, [r1, #7]
}
 800300c:	2000      	movs	r0, #0
 800300e:	4770      	bx	lr
	switch (parity) {
 8003010:	2302      	movs	r3, #2
 8003012:	e7d9      	b.n	8002fc8 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 8003014:	2300      	movs	r3, #0
 8003016:	e7e5      	b.n	8002fe4 <uart_stm32_config_get+0x3e>
		return UART_CFG_STOP_BITS_1_5;
 8003018:	2302      	movs	r3, #2
 800301a:	e7e3      	b.n	8002fe4 <uart_stm32_config_get+0x3e>
			return UART_CFG_DATA_BITS_8;
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf14      	ite	ne
 8003020:	2302      	movne	r3, #2
 8003022:	2303      	moveq	r3, #3
 8003024:	e7e9      	b.n	8002ffa <uart_stm32_config_get+0x54>

08003026 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8003026:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8003028:	6803      	ldr	r3, [r0, #0]
 800302a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800302c:	7903      	ldrb	r3, [r0, #4]
 800302e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003032:	3b01      	subs	r3, #1
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	6805      	ldr	r5, [r0, #0]
 8003038:	6814      	ldr	r4, [r2, #0]
 800303a:	441d      	add	r5, r3
 800303c:	42ac      	cmp	r4, r5
 800303e:	d902      	bls.n	8003046 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
 8003040:	f06f 0001 	mvn.w	r0, #1
}
 8003044:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8003046:	7965      	ldrb	r5, [r4, #5]
 8003048:	428d      	cmp	r5, r1
 800304a:	d002      	beq.n	8003052 <pinctrl_lookup_state+0x2c>
		(*state)++;
 800304c:	3408      	adds	r4, #8
 800304e:	6014      	str	r4, [r2, #0]
 8003050:	e7f1      	b.n	8003036 <pinctrl_lookup_state+0x10>
			return 0;
 8003052:	2000      	movs	r0, #0
 8003054:	e7f6      	b.n	8003044 <pinctrl_lookup_state+0x1e>

08003056 <z_device_state_init>:
}
 8003056:	4770      	bx	lr

08003058 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8003058:	b138      	cbz	r0, 800306a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800305a:	68c3      	ldr	r3, [r0, #12]
 800305c:	8818      	ldrh	r0, [r3, #0]
 800305e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8003062:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8003066:	4258      	negs	r0, r3
 8003068:	4158      	adcs	r0, r3
}
 800306a:	4770      	bx	lr

0800306c <arch_system_halt>:
	__asm__ volatile(
 800306c:	f04f 0210 	mov.w	r2, #16
 8003070:	f3ef 8311 	mrs	r3, BASEPRI
 8003074:	f382 8812 	msr	BASEPRI_MAX, r2
 8003078:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 800307c:	e7fe      	b.n	800307c <arch_system_halt+0x10>

0800307e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800307e:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8003080:	f7ff fff4 	bl	800306c <arch_system_halt>

08003084 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	4605      	mov	r5, r0
 8003088:	460e      	mov	r6, r1
 800308a:	f04f 0310 	mov.w	r3, #16
 800308e:	f3ef 8711 	mrs	r7, BASEPRI
 8003092:	f383 8812 	msr	BASEPRI_MAX, r3
 8003096:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800309a:	f7ff fa5d 	bl	8002558 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800309e:	4631      	mov	r1, r6
 80030a0:	4604      	mov	r4, r0
 80030a2:	4628      	mov	r0, r5
 80030a4:	f7ff ffeb 	bl	800307e <k_sys_fatal_error_handler>
	__asm__ volatile(
 80030a8:	f387 8811 	msr	BASEPRI, r7
 80030ac:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80030b0:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 80030b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80030b6:	f7fe b85f 	b.w	8001178 <z_impl_k_thread_abort>

080030ba <z_early_memset>:
	(void) memset(dst, c, n);
 80030ba:	f7ff bd02 	b.w	8002ac2 <memset>

080030be <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 80030be:	f7ff bcf5 	b.w	8002aac <memcpy>

080030c2 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 80030c2:	b508      	push	{r3, lr}
	__asm__ volatile(
 80030c4:	f04f 0210 	mov.w	r2, #16
 80030c8:	f3ef 8311 	mrs	r3, BASEPRI
 80030cc:	f382 8812 	msr	BASEPRI_MAX, r2
 80030d0:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 80030d4:	f7fd fe20 	bl	8000d18 <arch_cpu_idle>
 80030d8:	e7f4      	b.n	80030c4 <idle+0x2>

080030da <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 80030da:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 80030de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80030e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80030e2:	2300      	movs	r3, #0
	node->prev = NULL;
 80030e4:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 80030e8:	4770      	bx	lr

080030ea <unpend_thread_no_timeout>:
{
 80030ea:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 80030ec:	f7ff fff5 	bl	80030da <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80030f0:	7b43      	ldrb	r3, [r0, #13]
 80030f2:	f023 0302 	bic.w	r3, r3, #2
 80030f6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	6083      	str	r3, [r0, #8]
}
 80030fc:	bd08      	pop	{r3, pc}

080030fe <z_thread_timeout>:
{
 80030fe:	b510      	push	{r4, lr}
 8003100:	4601      	mov	r1, r0
 8003102:	f04f 0310 	mov.w	r3, #16
 8003106:	f3ef 8411 	mrs	r4, BASEPRI
 800310a:	f383 8812 	msr	BASEPRI_MAX, r3
 800310e:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8003112:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8003116:	f013 0f28 	tst.w	r3, #40	; 0x28
 800311a:	d10d      	bne.n	8003138 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 800311c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8003120:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 8003122:	b10b      	cbz	r3, 8003128 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 8003124:	f7ff ffe1 	bl	80030ea <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8003128:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 800312c:	f023 0314 	bic.w	r3, r3, #20
 8003130:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 8003134:	f7ff f824 	bl	8002180 <ready_thread>
	__asm__ volatile(
 8003138:	f384 8811 	msr	BASEPRI, r4
 800313c:	f3bf 8f6f 	isb	sy
}
 8003140:	bd10      	pop	{r4, pc}

08003142 <z_ready_thread>:
{
 8003142:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003144:	f04f 0310 	mov.w	r3, #16
 8003148:	f3ef 8411 	mrs	r4, BASEPRI
 800314c:	f383 8812 	msr	BASEPRI_MAX, r3
 8003150:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8003154:	f7ff f814 	bl	8002180 <ready_thread>
	__asm__ volatile(
 8003158:	f384 8811 	msr	BASEPRI, r4
 800315c:	f3bf 8f6f 	isb	sy
}
 8003160:	bd10      	pop	{r4, pc}

08003162 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8003162:	4603      	mov	r3, r0
 8003164:	b920      	cbnz	r0, 8003170 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003166:	f3ef 8205 	mrs	r2, IPSR
 800316a:	b90a      	cbnz	r2, 8003170 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 800316c:	f7fd be30 	b.w	8000dd0 <arch_swap>
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
}
 8003178:	4770      	bx	lr

0800317a <z_reschedule_unlocked>:
	__asm__ volatile(
 800317a:	f04f 0310 	mov.w	r3, #16
 800317e:	f3ef 8011 	mrs	r0, BASEPRI
 8003182:	f383 8812 	msr	BASEPRI_MAX, r3
 8003186:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800318a:	f7ff bfea 	b.w	8003162 <z_reschedule_irqlock>

0800318e <z_abort_timeout>:
{
 800318e:	b510      	push	{r4, lr}
 8003190:	f04f 0210 	mov.w	r2, #16
 8003194:	f3ef 8411 	mrs	r4, BASEPRI
 8003198:	f382 8812 	msr	BASEPRI_MAX, r2
 800319c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80031a0:	6803      	ldr	r3, [r0, #0]
 80031a2:	b13b      	cbz	r3, 80031b4 <z_abort_timeout+0x26>
			remove_timeout(to);
 80031a4:	f7ff fa96 	bl	80026d4 <remove_timeout>
			ret = 0;
 80031a8:	2000      	movs	r0, #0
	__asm__ volatile(
 80031aa:	f384 8811 	msr	BASEPRI, r4
 80031ae:	f3bf 8f6f 	isb	sy
}
 80031b2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80031b4:	f06f 0015 	mvn.w	r0, #21
 80031b8:	e7f7      	b.n	80031aa <z_abort_timeout+0x1c>

080031ba <z_set_timeout_expiry>:
{
 80031ba:	b570      	push	{r4, r5, r6, lr}
 80031bc:	4604      	mov	r4, r0
 80031be:	460d      	mov	r5, r1
	__asm__ volatile(
 80031c0:	f04f 0310 	mov.w	r3, #16
 80031c4:	f3ef 8611 	mrs	r6, BASEPRI
 80031c8:	f383 8812 	msr	BASEPRI_MAX, r3
 80031cc:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 80031d0:	f7ff fa58 	bl	8002684 <next_timeout>
			      || (ticks <= next_to);
 80031d4:	2801      	cmp	r0, #1
 80031d6:	dd07      	ble.n	80031e8 <z_set_timeout_expiry+0x2e>
 80031d8:	42a0      	cmp	r0, r4
 80031da:	db05      	blt.n	80031e8 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 80031dc:	42a0      	cmp	r0, r4
 80031de:	4629      	mov	r1, r5
 80031e0:	bfa8      	it	ge
 80031e2:	4620      	movge	r0, r4
 80031e4:	f7fe fc1a 	bl	8001a1c <sys_clock_set_timeout>
	__asm__ volatile(
 80031e8:	f386 8811 	msr	BASEPRI, r6
 80031ec:	f3bf 8f6f 	isb	sy
}
 80031f0:	bd70      	pop	{r4, r5, r6, pc}

080031f2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 80031f2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 80031f4:	f7ff fb62 	bl	80028bc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 80031f8:	bd08      	pop	{r3, pc}
